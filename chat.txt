import json
import pytz
import random
import pandas as pd
from faker import Faker
from datetime import datetime

# Assuming these functions are imported from relevant modules
from synthetic_data.pii_detection.from_data import get_table_info, get_faker_functions


class DataSynthesizerWithoutModel:
    """
    Class to generate synthetic data without using a pre-trained model.
    """

    def __init__(self, pii_file="PII_BOW.xlsx"):
        """
        Initialize the DataSynthesizerWithoutModel instance.

        Args:
            pii_file (str): Path to the PII (Personally Identifiable Information) file.
        """
        self.pii_file = pii_file

    def generate_data(self, table_info, faker_functions, matched_words_dict, num_rows):
        """
        Generate synthetic data based on table information, faker functions, and matched words dictionary.

        Args:
            table_info (DataFrame): DataFrame containing table information.
            faker_functions (dict): A dictionary of faker functions.
            matched_words_dict (dict): A dictionary of matched words.
            num_rows (int): The number of rows of data to generate.

        Returns:
            DataFrame: A DataFrame containing the generated synthetic data.
        """
        fake = Faker()
        data = []

        for _ in range(num_rows):
            row = {}
            for column_info in table_info:
                column_name = column_info['column_name']
                max_length = int(column_info.get('columnsize', 100))
                best_match = matched_words_dict.get(column_name, ['N/A', 'N/A', 0, 'N/A'])
                faker_function = faker_functions.get(best_match[1], None)

                if faker_function:
                    value = self.generate_value(faker_function, column_info['data_type'], max_length)
                else:
                    value = self.generate_default_value(column_info['data_type'])

                if isinstance(value, str) and len(value) > max_length:
                    value = value[:max_length]
                row[column_name] = value

            data.append(row)

        return pd.DataFrame(data)

    def generate_value(self, faker_function, data_type, max_length):
        """
        Generate a synthetic value based on the faker function, data type, and maximum length.

        Args:
            faker_function (callable): The faker function to use for generating the value.
            data_type (str): The data type of the column.
            max_length (int): The maximum length allowed for the value.

        Returns:
            Any: The generated synthetic value.
        """
        fake = Faker()
        if data_type == 'timestamp without time zone':
            return fake.date_time_between(start_date='-10y', end_date='now').strftime('%Y-%m-%d %H:%M:%S')
        elif data_type == 'timestamp with time zone':
            return fake.date_time_between(start_date='-10y', end_date='now', tzinfo=pytz.timezone(random.choice(pytz.all_timezones))).strftime('%Y-%m-%d %H:%M:%S %z')
        elif data_type == 'date':
            return fake.date(pattern='%d/%m/%Y')
        elif data_type == 'json dictionary':
            return json.dumps({"error": {"code": random.choice([400, 401, 403, 404, 500, 502, 503]), "message": fake.sentence()}})
        else:
            return faker_function()

    def generate_default_value(self, data_type):
        """
        Generate a default synthetic value based on the data type.

        Args:
            data_type (str): The data type of the column.

        Returns:
            Any: The generated synthetic value.
        """
        fake = Faker()
        if 'int' in data_type:
            return fake.random_int(min=0, max=1000)
        elif 'float' in data_type:
            return fake.pyfloat(left_digits=2, right_digits=2, positive=True)
        elif 'bool' in data_type:
            return fake.boolean()
        elif 'BLOB' in data_type:
            return bytes(fake.pystr(min_chars=1024, max_chars=1024), 'utf-8')
        elif 'CLOB' in data_type:
            return fake.text(max_nb_chars=1024)
        elif 'smallint' in data_type:
            return fake.random_int(min=-32768, max=32767)
        else:
            return ""

    def __call__(self, column_info, num_rows):
        """
        Generate synthetic data.

        Args:
            column_info (DataFrame): DataFrame containing column information.
            num_rows (int): The number of rows of data to generate.

        Returns:
            DataFrame: A DataFrame containing the generated synthetic data.
        """
        table_info, matched_words_dict = get_table_info(column_info, self.pii_file)
        faker_functions = get_faker_functions(self.pii_file)
        synthetic_data = self.generate_data(table_info, faker_functions, matched_words_dict, num_rows)
        return synthetic_data


