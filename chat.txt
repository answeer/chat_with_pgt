import json
import os

import yaml
from presidio_analyzer import AnalyzerEngine, Pattern, PatternRecognizer
from presidio_analyzer.nlp_engine import NlpEngineProvider
from presidio_anonymizer import AnonymizerEngine

from ecer.common.custom_logger import logger
from .config import RULES_FILE_PATH


# Load configurations from YAML
def load_configurations(yaml_file):
    with open(yaml_file, "r") as file:
        data = yaml.load(file, Loader=yaml.FullLoader)
        return data["rules"], data.get("inclusions", []), data.get("exclusions", [])


# Initialize the Presidio Analyzer engine with the default NLP engine and default recognizers
try:
    logger.info("Microsoft-Presidio Analyzer Loading")
    logger.info("Microsoft-Presidio Analyzer Loaded")
except Exception as e:
    logger.error(f"Error in Loading Presidio Engines! {e}")

    def pii_detector_masked(text):
        response = {"count": 0, "masked_data": json.dumps("")}
        return {"status": "Success", "response": response, "error_code": ""}

else:
    # Create an instance of the Presidio anonymizer
    anonymizer = AnonymizerEngine()

    def pii_detector_masked(text, chat_info): 
        try:
            # Define your text content and Add custom recognizers based on YAML rules
            rules, inclusions, exclusions = load_configurations(RULES_FILE_PATH)
            analysis_results = []
            for rule in rules:
                # Define the regex pattern in a Presidio `Pattern` object:
                regex_pattern = Pattern(
                    name=rule["name"], regex=rule["regex"], score=rule["score"]
                )

                # Define the recognizer with one or more patterns
                regex_recognizer = PatternRecognizer(
                    supported_entity=rule["name"], patterns=[regex_pattern]
                )

                regex_result = regex_recognizer.analyze(
                    text=text, entities=[rule["name"]]
                )
                analysis_results.extend(regex_result)

            # Filter results to exclude specified entity types and include specified inclusions
            filtered_results = [
                result
                for result in analysis_results
                if result.entity_type not in exclusions
                and (result.entity_type in inclusions or not inclusions)
            ]

            # Count the number of unique PII entities detected
            unique_pii_entities = set(result.entity_type for result in filtered_results)

            # Anonymize the PII in the text
            anonymized_text = anonymizer.anonymize(
                text=text, analyzer_results=filtered_results
            )

            if len(unique_pii_entities) == 0:
                response = {"count": 0, "masked_data": json.dumps("")}
            else:
                logger.info(
                    json.dumps(
                        {
                            "number_of_pii_entities": len(unique_pii_entities),
                            "masked_text": anonymized_text.text,
                            "pii_entities": list(unique_pii_entities)
                        }
                    ),
                    extra=chat_info
                )
                response = {
                    "count": len(unique_pii_entities),
                    "masked_data": json.dumps(anonymized_text.text),
                    "pii_entities": list(unique_pii_entities)
                }

            return {"status": "Success", "response": response, "error_code": ""}

        except Exception as e:
            logger.error("Error in PII Detector Function")
            return {
                "status": "Error",
                "response": str(e),}
