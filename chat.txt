from llm_sanitation.scanners.scanner_base import Scanner
from symspellpy import SymSpell, Verbosity
import pkg_resources
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class SpellCorrection(Scanner):

    def __init__(self, **kwargs):
        sanitize = kwargs["sanitize"]
        super().__init__("spell_corrector", 0.5, sanitize=sanitize,)

    def predict(self, data):
        sanitized_data = data
        score = 0
        try:
            sym_spell = SymSpell(max_dictionary_edit_distance=2, prefix_length=7)
            dictionary_path = pkg_resources.resource_filename(
                "symspellpy", "frequency_dictionary_en_82_765.txt")
            bigram_path = pkg_resources.resource_filename(
                "symspellpy", "frequency_bigramdictionary_en_243_342.txt")

            sym_spell.load_dictionary(dictionary_path, term_index=0, count_index=1)
            sym_spell.load_bigram_dictionary(bigram_path, term_index=0, count_index=2)

            suggestions = sym_spell.lookup_compound((data), max_edit_distance=2)
            sanitized_data = ""
            for suggestion in suggestions:
                sanitized_data =sanitized_data + str(suggestion).split(",")[0]

            score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)

        return score, sanitized_data

    def format_response(self):
        self.response["score"] = self.pred[0]
        self.response['sanitized_data'] = self.pred[1]
