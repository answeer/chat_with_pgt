文件上传功能已经包含在dashboard的前端应用中，这是现有的view文件内容：
# dashboard/views.py
from django.shortcuts import get_object_or_404, redirect, render
from django.views.decorators.csrf import csrf_exempt

from .forms import ProjectForm
from .models import Document, Project, DocumentType
from django.http import JsonResponse
from django.contrib import messages
import json

import yaml


def get_validation_options():
    # Path to the YAML file
    yaml_file_path = "./validation.yml"

    # Open and read the YAML file
    with open(yaml_file_path, "r") as file:
        data = yaml.safe_load(file)

    # Extract validation options
    validation_options = data.get("validation_options", [])
    return validation_options


def create_document(request):
    document_types = DocumentType.objects.all()

    if request.method == 'POST':
        document_name = request.POST.get('document_name')
        knowledgebase = request.POST.get('knowledgebase')
        selected_document_type_ids = request.POST.getlist('document_types')

        # Fetch the names of the selected document types
        selected_document_type_names = DocumentType.objects.filter(
            id__in=selected_document_type_ids
        ).values_list('name', flat=True)

        # Create the Document instance
        Document.objects.create(
            name=document_name,
            knowledgebase=knowledgebase,
            # document_types=list(selected_document_type_names)  # Save as a list of names
            document_types=get_validation_options()  # Save as a list of names
        )
        return redirect('dashboard:dashboard')

    return render(request, 'dashboard/create_document.html', {
        'document_types': document_types
    })


def upload_document(request, project_id):
    project = get_object_or_404(Project, pk=project_id)

    if request.method == "POST":
        uploaded_file = request.FILES.get("document")
        if uploaded_file:
            # Insert the document into the dashboard_document table
            Document.objects.create(
                status="pending",
                entities={},
                reviewed_entities={},
                review=0,
                project=project,
                name=uploaded_file.name,
                image_path=uploaded_file,
            )
            

            return redirect("dashboard:project_detail", pk=project_id)

    return render(request, "dashboard/upload_document.html", {"project": project})


@csrf_exempt
def review_document(request, document_id):
    # Fetch the document from the database
    document = get_object_or_404(Document, id=document_id)

    # Pass the document to the template
    return render(request, "review_document.html", {"document": document})


@csrf_exempt
def submit_review(request, document_id):
    if request.method == "POST":
        # Get the document object
        document = get_object_or_404(Document, id=document_id)

        # Extract reviewed entities from the form
        reviewed_entities = {}

        is_reviewed_present = any(
            key == "reviewed" for key, value in request.POST.items()
        )
        print("----", is_reviewed_present)
        for key, value in request.POST.items():
            if key.startswith("reviewed_entities["):
                entity_key = key[len("reviewed_entities[") : -1]  # Extract the key name
                reviewed_entities[entity_key] = value

        # Save the reviewed entities as JSON
        document.reviewed_entities = reviewed_entities
        if is_reviewed_present:
            document.review = 1  # Mark as reviewed if checkbox is checked
            document.status = "reviewed"  # Mark as reviewed if checkbox is checked
        document.save()

        # Add a success message and redirect
        messages.success(request, "Document review submitted successfully!")
        return redirect("dashboard:dashboard")  # Redirect to the dashboard

    return JsonResponse({"error": "Invalid request method"}, status=400)


@csrf_exempt
def review_document(request, doc_id):
    document = get_object_or_404(Document, id=doc_id)
    return render(request, "dashboard/review_document.html", {"document": document})


@csrf_exempt
def dashboard(request):
    projects = Project.objects.prefetch_related("documents").all()
    for project in projects:
        project.total_docs = project.documents.count()
        project.processed_docs = project.documents.filter(
            status="Pending Review"
        ).count()
        project.reviewed_docs = project.documents.filter(status="reviewed").count()
    total_projects = projects.count()

    print("projects   ", total_projects)
    total_documents = sum(p.total_docs for p in projects)
    total_processed = sum(p.processed_docs for p in projects)
    total_reviewed = sum(p.reviewed_docs for p in projects)
    return render(
        request,
        "dashboard/dashboard.html",
        {
            "projects": projects,
            "total_projects": total_projects,
            "total_documents": total_documents,
            "total_processed": total_processed,
            "total_reviewed": total_reviewed,
        },
    )


@csrf_exempt
def project_detail(request, pk):
    project = get_object_or_404(Project, pk=pk)
    documents = project.documents.all()
    return render(
        request,
        "dashboard/project_detail.html",
        {
            "project": project,
            "documents": documents,
        },
    )


@csrf_exempt
def create_project(request):
    document_types = DocumentType.objects.all()  # Fetch all document types from the database

    if request.method == "POST":
        project_name = request.POST.get("name")
        selected_document_types = request.POST.getlist("document_types")  # Get selected document types
        description = request.POST.get("description")# Get selected document types

        print("-------------- ",project_name, selected_document_types)

        # Create a new Project instance
        project = Project.objects.create(
            name=project_name,
            description = description,
            status = "posted",
            document_types=selected_document_types  # Save selected document types
        )
        return redirect("dashboard:dashboard")

    return render(request, "dashboard/create_project.html", {
        "document_types": document_types  # Pass document types to the template
    })


@csrf_exempt
def edit_project(request, pk):
    project = get_object_or_404(Project, pk=pk)
    if request.method == "POST":
        description = request.POST.get("description")  # Get the description value
        project.description = description  # Update the project description
        project.document_types = ",".join(request.POST.getlist("document_types"))  # Save as comma-separated values
        project.save()  # Save the changes to the database
        return redirect("dashboard:dashboard")
    else:
        form = ProjectForm(instance=project)
        # Split the stored document types into a list for preloading
        print("??????? ",project.document_types)
        # selected_document_types = project.document_types.split(",") if project.document_types else []
        document_types = DocumentType.objects.all()

    return render(
        request,
        "dashboard/create_project.html",
        {
            "form": form,
            "edit_mode": True,
            "project": project,
            "document_types": document_types # Pass selected document types as a list
        },
    )
这是现有的model文件内容：
from django.db import models


class Project(models.Model):
    name = models.CharField(max_length=100, unique=True)
    document_type = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    entities_to_extract = models.JSONField(default=list, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, default="active")
    document_types = models.JSONField(default=list)  # Store document type names as a list   ---> get the list of classification class  ["BOL"]

    def __str__(self):
        return self.name


class DocumentType(models.Model):
    name = models.CharField(max_length=255)  # ["BOL"]
    entities_to_extract = models.JSONField()  # Store entities as a JSON list   -> these are the enties to extract
    description = models.TextField(blank=True)
    knowledgebase = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

class Document(models.Model):
    project = models.ForeignKey(
        Project, related_name="documents", on_delete=models.CASCADE
    )
    name = models.CharField(max_length=100, blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True, blank=True)
    doc_type = models.CharField(max_length=255, null=True, blank=True)  # <-- populate form classification
    status = models.CharField(max_length=20, default="in progress")
    entities = models.JSONField(default=list, blank=True)  # <-- populate from the predicted entitries
    reviewed_entities = models.JSONField(default=list, blank=True)  # JSONField for storing reviewed entities
    review = models.BooleanField(default=False)
    image_path = models.CharField(max_length=255, null=True, blank=True)  # New column for image path
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name or f"Document {self.id}"
