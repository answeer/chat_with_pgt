# encryption detector
import os
import fitz
import zipfile
import py7zr
import msoffcrypto
from llm_sanitation.scanners.scanner_base import Scanner


class EncryptionDetector(Scanner):

    def __init__(self, **kwargs):
        super().__init__("encryption_detector", 1)

    def get_extn(self, path):
        return os.path.split(path)[-1].split(".")[-1].lower()

    def is_pwd_pdf(self, file_path):
        try:
            doc = fitz.open(file_path, filetype="pdf")
            if doc.needs_pass:
                return True
            else:
                return False
        except Exception as e:
            print("Error occured: {}".format(e))

    def is_pwd_msdoc(self, file_path):
        try:
            with open(file_path, "rb") as stream:
                ms_file = msoffcrypto.OfficeFile(stream)
                return ms_file.is_encrypted()
        except Exception as e:
            print("Error occured: {}".format(e))

    def is_pwd_7z(self, file_path):
        with py7zr.SevenZipFile(file_path, "r") as archive:
            try:
                archive.extractall()
                return False
            except Exception as e:
                if type(e) == py7zr.exceptions.PasswordRequired:
                    return True
                else:
                    print("Error occured: {}".format(e))

    def is_pwd_zip(self, file_path):
        try:
            zf = zipfile.ZipFile(file_path)
            zf.testzip()
            return False
        except RuntimeError as e:
            if "encrypted" in str(e):
                return True
            else:
                print("Error occured: {}".format(e))

    def predict(self, file_path):

        extn = self.get_extn(file_path)
        is_protected = False

        if extn == "pdf":
            is_protected = self.is_pwd_pdf(file_path)

        elif extn in ["xlsx", "xls", "doc", "docx"]:
            is_protected = self.is_pwd_msdoc(file_path)

        elif extn == "7z":
            is_protected = self.is_pwd_7z(file_path)

        elif extn == "zip":
            is_protected = self.is_pwd_zip(file_path)

        else:
            print("Unsupported format {}".format(extn))

        return {"is_protected": is_protected, "score": 0 if is_protected else 1}

    def format_response(self):
        self.response["prediction"]["is_protected"] = self.pred["is_protected"]
        self.response["score"] = self.pred["score"]
