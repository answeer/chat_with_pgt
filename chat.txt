def run_action(self, execution_plans, payload, save_path="."):
    """Executes the scanning process based on the provided execution plan and scanner type."""
    try:
        error_code = ""
        error_message = ""
        job_id = self.kwargs["job_id"]
        task_group = self.determine_task_group()
        self.kwargs["task_group"] = task_group

        # 提前校验任务组类型
        if task_group != "validators":
            error_code = "FRDIOS0006"
            error_message = ERROR_CODE_DICT["FRDIOS0006"].format(str(task_group))
            self.log_error(j, error_message)
            return None, error_code, error_message

        for exec_plan in execution_plans:
            exec_plan_response = self.process_execution_plan(exec_plan, payload, job_id)
            if self.response.status == "failed":
                return None, self.response.error_code, self.response.error_message
            self.combined_result.append(exec_plan_response)

        return self.combined_result, error_code, error_message
    except Exception as e:
        # 可根据需要添加异常处理
        raise

def process_execution_plan(self, exec_plan, payload, job_id):
    """处理单个执行计划"""
    exec_plan_response = self.exec_plan_response_tmpl.copy()
    execution_plan = exec_plan["exec_plan"]
    data_paths = exec_plan["data"]
    exec_plan_response["data"].extend(data_paths)

    for data_path in data_paths:
        data = get_data(data_path, payload)
        self.check.check_payload(data)
        if self.has_validation_failed():
            return exec_plan_response

        # 处理扫描器
        exec_plan_response = self.process_scanners(
            data, execution_plan, exec_plan_response, job_id
        )
        if self.response.status == "failed":
            break

    return exec_plan_response

def process_scanners(self, data, execution_plan, exec_plan_response, job_id):
    """处理扫描器执行流程"""
    for _, plan in execution_plan.items():
        for scanner_nm, param in plan.items():
            result = self.run_scanner(data, scanner_nm, param, ​**self.kwargs)
            exec_plan_response["guardrails"].append(result)
            data = result["sanitized_data"] or data
            if self.has_operation_failed():
                self.log_error(job_id, self.response.error_message)
                break
    return exec_plan_response

def has_validation_failed(self):
    """检查预验证结果"""
    return self.response.status == "failed"

def has_operation_failed(self):
    """检查操作失败状态"""
    return self.response.status == "failed"

def log_error(self, job_id, error_message):
    """统一错误日志记录"""
    LogUtil.log(
        LogType.ERROR,
        LogLevel.ERROR,
        "Running ended with error",
        jid=job_id,
        error=error_message,
    )
