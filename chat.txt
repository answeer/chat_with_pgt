from django.utils import timezone as tz
from llm_sanitation.models import GuaidrailsAudit


class DBServices:
    def __init__(self):
        """
        Initialize DB services
        """
        pass

    def db_insert(self, **kwargs):
        """
        Receives environment details, query and parameters for query in kwargs to do the DB insert.
        env - env details in .env
        query - sql query
        **kwargs - parameters that are used inside the query
        """

        audit_trans = GuaidrailsAudit.objects.using("friday_audit_info").create(
            job_id=kwargs["job_id"],
            task_id=kwargs["task_id"],
            start_ts=tz.now(),
            pod_name="validator",
            file_name="",
            usecase=kwargs["usecase"],
            event=kwargs["event"],
            policy_id=kwargs["policy_id"],
            task_group=kwargs["task_group"],
            task_name=kwargs["task_name"],
        )
        audit_trans.save(using="friday_audit_info")

    def db_update(self):
        """
        Receives environment details, query and parameters for query in kwargs to do the DB insert.
        env - env details in .env
        query - sql query
        **kwargs - parameters that are used inside the query
        """




############ For local test only ###################
# import os

# os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tests.test_settings")
# import django
# # django.setup()
# from django.core.management import call_command
from django.db import models

#######################################################


# Create your models here.


class GuaidrailsAudit(models.Model):
    job_id = models.AutoField(primary_key=True)
    task_id = models.CharField(max_length=256, blank=False, null=False)
    start_ts = models.DateTimeField(blank=True, null=True)
    pod_name = models.CharField(max_length=256, blank=False, null=True)
    file_name = models.CharField(max_length=256, blank=False, null=True)
    usecase = models.CharField(max_length=256, blank=False, null=False)
    event = models.CharField(max_length=256, blank=False, null=False)
    policy_id = models.CharField(max_length=256, blank=False, null=False)
    task_group = models.CharField(max_length=256, blank=False, null=False)
    task_name = models.CharField(max_length=256, blank=False, null=False)
    end_ts = models.DateTimeField(blank=True, null=True)
    result = models.JSONField()
    score = models.FloatField()
    NSTP = models.BooleanField()
    class Meta:
        # managed = False
        db_table = "friday_audit_info"
