import yaml

def extract_policies(yaml_content):
    """
    从YAML内容中提取每个数据类型的每个数据对应的策略
    
    :param yaml_content: YAML格式的字符串内容
    :return: 嵌套字典结构 {数据类型: {数据项: [策略列表]}}
    """
    data = yaml.safe_load(yaml_content)
    input_data = data['Ops_agents']['agent1']['guardrails']['input_data']
    
    result = {}
    
    for data_type, entries in input_data.items():
        result[data_type] = {}
        
        # 统一处理为列表格式
        if not isinstance(entries, list):
            entries = [entries]
            
        for entry in entries:
            # 获取数据项列表（处理单字符串和多列表情况）
            data_items = entry.get('data', [])
            if not isinstance(data_items, list):
                data_items = [data_items]
                
            # 获取策略列表
            policies = entry.get('policies', [])
            
            # 将每个数据项与策略关联
            for item in data_items:
                result[data_type][item] = list(policies)  # 复制策略列表避免引用问题
                
    return result

# 示例用法
yaml_content = """
version: v1.0.0
Consumer: [...]  # 省略部分内容
Ops_agents:
  agent1:
    agent_id: AGNT00001
    role: "maker"
    country: IN
    guardrails:
      input_data:
        text:
          - data:
              - "params.service_path"
            type: "text"
            policies:
              - 001_free_text_bounding_policy
              - 002_free_text_sanitation_policy
          - data:
              - "params.output_path"
            type: "text"
            policies:
              - 001_free_text_bounding_policy
              - 002_free_text_sanitation_policy
        image:
          - data:
              - "params.stream_path"
            type: "64bitencode"
            policies:
              - 002_file_bounding_policy
          - data:
              - "params.output_path"
            type: "image"
            policies:
              - 002_file_bounding_policy
        json:
          data: "*"
          policies:
            - 000_payload_validation_policy
"""

result = extract_policies(yaml_content)
for data_type, mappings in result.items():
    print(f"数据类型: {data_type}")
    for data_item, policies in mappings.items():
        print(f"  - 数据项: {data_item}")
        print(f"    策略: {policies}")
    print()
