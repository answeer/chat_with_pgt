from collections import defaultdict
import os
from llm_sanitation.agent.utils.defaults import scanner_default
from llm_sanitation.agent.utils.connectors import get_usecase_mfst
from llm_sanitation.agent.utils.common import (
    get_policy,
    get_usecase_data_policies,
)
from pprint import pprint


class Planner:
    """
    A class to represent the planning process for executing business and AI skills 
    based on the policies defined in the use case manifest.

    Attributes
    ----------
    scanner_default : dict
        A dictionary containing default AI skills for various business skills.

    Methods
    -------
    reorder_plan(execution_plan):
        Reorders the execution plan according to a predefined order of business skills.
    
    get_exec_plan(usecase_mfst_nm, agent_nm="*"):
        Generates an execution plan by extracting business and AI skills from the use case manifest.
    """

    def __init__(self):
        """
        Initializes the Planner with default AI skill configurations for various business skills.
        """
        self.scanner_default = scanner_default

    def reorder_plan(self, execution_plan):
        """
        Reorders the execution plan according to a predefined sequence of business skills.

        Parameters
        ----------
        execution_plan : dict
            A dictionary containing business skills as keys and associated AI skills as values.

        Returns
        -------
        dict
            The reordered execution plan with business skills in a specific predefined order.
        """
        b_skill_order = ["payload_validator", "file_bounding", "numeric_bounding", "numeric_sanitation", 
                         "text_bounding", "text_data_sanitation", "image_bounding", "image_data_sanitation"]
        reordered_execution_plan = {}

        for b_skill in b_skill_order:
            if b_skill in execution_plan:
                reordered_execution_plan[b_skill] = execution_plan[b_skill]

        return reordered_execution_plan


    def get_exec_plan(self, usecase_mfst_nm, agent_nm="*"):
        """
        Generates an execution plan for the given agent by analyzing the use case manifest policies.

        Parameters
        ----------
        usecase_mfst_nm : str
            The name of the use case manifest file.
        agent_nm : str, optional
            The name of the agent (default is "*", meaning all agents).

        Returns
        -------
        dict
            A dictionary representing the execution plan, where business skills are mapped to AI skills 
            and their conditions defined in the policies.
        """
        usecase_mfst = get_usecase_mfst(usecase_mfst_nm)
        policies = get_usecase_data_policies(usecase_mfst, agent_nm)
        actions = []
        no_actions = []
        ai_skills = []
        b_skills = []
        execution_plan = {}

        for policy in policies:
            policy_json = get_policy(policy)
            stmts = policy_json["Statement"]

            for stmt in stmts:
                actions = stmt["Action"]
                no_actions = stmt["NotAction"]

                skills = defaultdict(lambda: [])

                # Process Actions
                for action in actions:
                    b_skill, ai_skill = action.split(":")

                    if ai_skill == "*":
                        skills[b_skill].extend(self.scanner_default[b_skill])
                    else:
                        skills[b_skill].append(ai_skill)

                # Process NotActions
                for no_action in no_actions:
                    b_skill, ai_skill = no_action.split(":")
                    try:
                        if ai_skill == "*":
                            skills[b_skill].remove(self.scanner_default[b_skill])
                        else:
                            skills[b_skill].remove(ai_skill)
                    except ValueError:
                        pass

                # Add conditions to the execution plan
                skills = dict(skills)
                b_skills = skills.keys()
                for b_skill in b_skills:
                    ai_skills = skills[b_skill]
                    for ai_skill in ai_skills:
                        if b_skill not in execution_plan:
                            execution_plan[b_skill] = {}
                        execution_plan[b_skill][ai_skill] = stmt["Condition"].get(ai_skill, {})

        # Print and return the reordered execution plan
        pprint(self.reorder_plan(execution_plan))
        return self.reorder_plan(execution_plan)


if __name__ == "__main__":
    """
    Entry point of the script to generate and display the execution plan 
    for a specified agent based on the use case manifest.

    Example
    -------
    To generate an execution plan:
        - Specify the agent manifest and use case manifest files.
    """
    agent = "agent1"
    planner_obj = Planner()
    execution_plan = planner_obj.get_exec_plan("usecase_manifest", agent)
    pprint(execution_plan)
