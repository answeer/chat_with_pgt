在util文件夹下，现有的llm文件夹下有三个文件，__init__.py,内容为空，generate.py:
import json
from databricks.sdk.service.serving import ChatMessage, ChatMessageRole
from utils.llm.db_managed.helper import *

def generate(databricks_client, query, relevant_chunk, model_serving_endpoint):

    file_name = relevant_chunk[1]
    content = relevant_chunk[2]
    constructed_query = {
        "query": query,
        "context": {
            "file_name": file_name,
            "content": content
        }
    }
    try:
        # Assuming `databricks_client` is an instance of the Databricks SDK client
        response = databricks_client.serving_endpoints.query(
            name=model_serving_endpoint,
            messages=[ChatMessage(role=ChatMessageRole.USER, content= json.dumps(constructed_query) ),]
        )
        return response
    except Exception as e:
        print(f"Error during model endpoint query: {e}")
        return {},
helper.py:
import os
from databricks.sdk import WorkspaceClient

DATABRICKS_TOKEN = os.getenv("DATABRICKS_TOKEN")
WORKSPACE_URL = os.getenv("WORKSPACE_URL")

databricks_client = WorkspaceClient(
    host=WORKSPACE_URL,
    token=DATABRICKS_TOKEN
)
vector store文件夹下有四个文件，__init__.py，内容为空，index.py:

from utils.vector_store.db_managed.helper import *

def index(vector_search_endpoint_name, vs_index_fullname, source_table_fullname, embedding_model_endpoint_name):
    if index_exists(vsc, vector_search_endpoint_name, vs_index_fullname):
        #Trigger a sync to update our vs content with the new data saved in the table
        wait_for_index_to_be_ready(vsc, vector_search_endpoint_name, vs_index_fullname)
        vsc.get_index(vector_search_endpoint_name, vs_index_fullname).sync()

        print(f"index {vs_index_fullname} on table {source_table_fullname} is ready")
    else:
        print(f"Creating index {vs_index_fullname} on endpoint {vector_search_endpoint_name}...")
        vsc.create_delta_sync_index(
            endpoint_name=vector_search_endpoint_name,
            index_name=vs_index_fullname,
            source_table_name=source_table_fullname,
            pipeline_type="TRIGGERED",
            primary_key="id",
            embedding_source_column='chunks', #The column containing our text
            embedding_model_endpoint_name=embedding_model_endpoint_name #The embedding endpoint used to create the embeddings
        )
        #Let's wait for the index to be ready and all our embeddings to be created and indexed
        wait_for_index_to_be_ready(vsc, vector_search_endpoint_name, vs_index_fullname)
query.py:

from utils.vector_store.db_managed.helper import *

def query_vector_store(query, vector_search_endpoint_name, vs_index_fullname):
    try:
        results = vsc.get_index(vector_search_endpoint_name, vs_index_fullname).similarity_search(
            query_text=query,
            columns=["id", "file_name", "chunks"],
            num_results=1
        )
        docs = results.get('result', {}).get('data_array', [])
        if docs:
            return docs[0]
        return ''
    except Exception as e:
        print(f"Error during similarity search: {e}")
        return ''
helper.py:
import time
import os
from databricks.vector_search.client import VectorSearchClient

DATABRICKS_TOKEN = os.getenv("DATABRICKS_TOKEN")
WORKSPACE_URL = os.getenv("WORKSPACE_URL")

vsc = VectorSearchClient(
    disable_notice=True,
    workspace_url=WORKSPACE_URL,
    personal_access_token=DATABRICKS_TOKEN,
)


#  Index utils
def index_exists(vsc, endpoint_name, index_full_name):
    try:
        vsc.get_index(endpoint_name, index_full_name).describe()
        return True
    except Exception as e:
        if "RESOURCE_DOES_NOT_EXIST" not in str(e):
            print(
                f"Unexpected error describing the index. This could be a permission issue."
            )
            raise e
    return False


def wait_for_index_to_be_ready(vsc, vs_endpoint_name, index_name):
    for i in range(180):
        idx = vsc.get_index(vs_endpoint_name, index_name).describe()
        index_status = idx.get("status", idx.get("index_status", {}))
        status = index_status.get(
            "detailed_state", index_status.get("status", "UNKNOWN")
        ).upper()
        url = index_status.get("index_url", index_status.get("url", "UNKNOWN"))
        if "ONLINE" in status:
            return
        if "UNKNOWN" in status:
            print(
                f"Can't get the status - will assume index is ready {idx} - url: {url}"
            )
            return
        elif "PROVISIONING" in status:
            if i % 40 == 0:
                print(
                    f"Waiting for index to be ready, this can take a few min... {index_status} - pipeline url:{url}"
                )
            time.sleep(10)
        else:
            raise Exception(
                f"""Error with the index - this shouldn't happen. DLT pipeline might have been killed.\n Please delete it and re-run the previous cell: vsc.delete_index("{index_name}, {vs_endpoint_name}") \nIndex details: {idx}"""
            )
    raise Exception(
        f"Timeout, your index isn't ready yet: {vsc.get_index(index_name, vs_endpoint_name)}"
    )

#  Vector Search Endpoint
def endpoint_exists(vsc, vs_endpoint_name):
    try:
        return vs_endpoint_name in [
            e["name"] for e in vsc.list_endpoints().get("endpoints", [])
        ]
    except Exception as e:
        # Temp fix for potential REQUEST_LIMIT_EXCEEDED issue
        if "REQUEST_LIMIT_EXCEEDED" in str(e):
            print(
                "WARN: couldn't get endpoint status due to REQUEST_LIMIT_EXCEEDED error. The demo will consider it exists"
            )
            return True
        else:
            raise e


def wait_for_vs_endpoint_to_be_ready(vsc, vs_endpoint_name):
    for i in range(180):
        try:
            endpoint = vsc.get_endpoint(vs_endpoint_name)
        except Exception as e:
            # Temp fix for potential REQUEST_LIMIT_EXCEEDED issue
            if "REQUEST_LIMIT_EXCEEDED" in str(e):
                print(
                    "WARN: couldn't get endpoint status due to REQUEST_LIMIT_EXCEEDED error. Please manually check your endpoint status"
                )
                return
            else:
                raise e
        status = endpoint.get("endpoint_status", endpoint.get("status"))[
            "state"
        ].upper()
        if "ONLINE" in status:
            return endpoint
        elif "PROVISIONING" in status or i < 6:
            if i % 20 == 0:
                print(
                    f"Waiting for endpoint to be ready, this can take a few min... {endpoint}"
                )
            time.sleep(10)
        else:
            raise Exception(
                f"""Error with the endpoint {vs_endpoint_name}. - this shouldn't happen: {endpoint}.\n Please delete it and re-run the previous cell: vsc.delete_endpoint("{vs_endpoint_name}")"""
            )
    raise Exception(
        f"Timeout, your endpoint isn't ready yet: {vsc.get_endpoint(vs_endpoint_name)}"
    )
请根据以上内容对已生成的内容进行修改
