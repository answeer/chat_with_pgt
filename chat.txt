import os
import re
import json
import time
import requests
from django.conf import settings

class DocumentProcessor:
    
    def __init__(self, model="miniCPM"):
        self.model = model
        self.vlm_url = settings.VLM_API_URL

    def process_document(self, image_path: str) -> dict:
        try:
            start = time.time()
            doc_type = self.classify_document(image_path)
            extraction_results = self.extract_with_vlm(image_path, doc_type)
            final_results = self.clean_json_output(
                extraction_results['results']
            )
            return {
                "success": True,
                "processing_time": round(time.time() - start, 2),
                "doc_type": doc_type,
                "results": final_results
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }

    def classify_document(self, image_path: str) -> str:
        prompt = """
        Classify this document: BOL, aadhar, or other, Use the Knowledgebase for the context . Please return only the document type.
## Knowledgebase 
BOL: It is a bill of lading , It's a crucial legal document in shipping and international trade. It acts as a receipt for goods being shipped, a contract of carriage between the shipper and carrier, and a document of title for the goods.
aadhar : An Aadhaar document is a 12-digit unique identification number issued by the Unique Identification Authority of India (UIDAI) to residents of India. It serves as proof of identity and address for various purposes, including financial transactions, government benefits, and other services .
"""
        response = self.call_vlm(image_path, prompt)
        return response['results'].strip().lower()

    def extract_with_vlm(self, image_path, doc_type: str) -> dict:
        prompt = self.create_prompt(doc_type)
        print(prompt)
        return self.call_vlm(image_path, prompt)

    def create_prompt(self, doc_type: str) -> str:
        from dashboard.models import DocumentType
        doc_type_obj = DocumentType.objects.get(name__iexact=doc_type)
        entities = json.dumps(doc_type_obj.entities_to_extract)
        structured_entities = {item['entity_name']: "" for item in json.loads(entities)}
        knowledgebase = doc_type_obj.knowledgebase
        return f"{structured_entities}\n{knowledgebase}"

    def call_vlm(self, image_path, prompt: str) -> str:
        files = {'image': open(image_path, 'rb')}
        data = {'prompt': prompt}
        response = requests.post(self.vlm_url, files=files, data=data)
        response.raise_for_status()
        return response.json()

    def clean_json_output(self, raw_output: str) -> dict:
        cleaned = re.sub(r'^```json\s*|\s*```$', '', raw_output, flags=re.MULTILINE)
        entities_data = json.loads(cleaned.strip())
        return entities_data
