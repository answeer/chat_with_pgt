import cv2
import numpy as np
from PIL import Image,ImageDraw
import time
import sys
import os
import math
from augraphy import *
import albumentations as A
import random

def gussis_noise(image):
    try:
        gussis_noise = A.GaussNoise(std_range=(0.1, 0.2), p=1.0)
        image = gussis_noise(image=image)["image"]
        return image
    except Exception as e:
        print(e)
        return image

def vertical_lines(image):
    try:
        quality = 5
        interval= 7 - quality
        line_width=1
        color=(255, 255, 255, 128)
        img = Image.fromarray(cv2.cvtColor(image,cv2.COLOR_BGR2RGB))
        img = img.convert("RGBA")
        width, height = img.size
        output_img = img.copy()
        draw = ImageDraw.Draw(output_img)
        for x in range(0, width, interval):
            draw.line([(x, 0), (x, height)], fill=color, width=line_width)
        output_img = cv2.cvtColor(np.asarray(output_img),cv2.COLOR_RGB2BGR)
        return output_img
    except Exception as e:
        print(e)
        return image

def img_badphotocopy(image):
    try:
        quality = [0.3,0.3]
        bad_photo_copy = BadPhotoCopy(noise_type=5,
                                    noise_iteration=(1,1),
                                    noise_size=(2,2),
                                    noise_sparsity=(quality[0],quality[1]),
                                    noise_concentration= (0.3,0.3),
                                    blur_noise=1,
                                    blur_noise_kernel=(5, 5),
                                    wave_pattern=0,
                                    edge_effect=0)
        image = bad_photo_copy(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_bleedthrough(image):
    try:
        bleedthrough = BleedThrough(intensity_range=(0.1, 0.9),
                                color_range=(0, 224),
                                ksize=(17, 17),
                                sigmaX=0,
                                alpha=0.3,
                                offsets=(10, 20),
                            )

        image = bleedthrough(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_brightness_texturize(image):
    try:
        brightness_texturize = BrightnessTexturize(texturize_range=(0.8,0.99),
                                            deviation=0.1)

        img_brightness_texturize = brightness_texturize(image)
        return img_brightness_texturize
    except Exception as e:
        print(e)
        return image

def img_dirty_drum(image):
    try:
        dirtydrum3 = DirtyDrum(line_width_range=(2, 5),
                        line_concentration=0.3,
                        direction=2,
                        noise_intensity=0.1,
                        noise_value=(0, 5),
                        ksize=(3, 3),
                        sigmaX=0,
                        )

        image = dirtydrum3(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_faxify(image):
    try:
        faxify = Faxify(scale_range = (1.0, 1.25),
                    monochrome = 1,
                    monochrome_method = "cv2.threshold",
                    monochrome_arguments = {"thresh":128, "maxval":128, "type":cv2.THRESH_BINARY},
                    halftone = 1,
                    invert = 1,
                    half_kernel_size = (1,1),
                    angle = (0, 360),
                    sigma = (1,1))

        image = faxify(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_hollow(image):
    try:
        hollow = Hollow(hollow_median_kernel_value_range = (101, 101),
                    hollow_min_width_range=(1, 1),
                    hollow_max_width_range=(200, 200),
                    hollow_min_height_range=(1, 1),
                    hollow_max_height_range=(200, 200),
                    hollow_min_area_range=(10, 10),
                    hollow_max_area_range=(2000,5000),
                    hollow_dilation_kernel_size_range = (3, 3),
                    )

        image= hollow(image)
        return image
    except Exception as e:
        print(e)
        return image
    
def img_lighting_gradient(image):
    try:
        lighting_gradient_gaussian = LightingGradient(light_position=None,
                                                direction=90,
                                                max_brightness=255,
                                                min_brightness=0,
                                                mode="gaussian",
                                                transparency=0.5
                                                )

        image = lighting_gradient_gaussian(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_low_light_noise(image):
    try:
        lowlightnoise_obj = LowLightNoise(
                                        num_photons_range = (50, 50),
                                        alpha_range = (0.7,1.0),
                                        beta_range = (20, 20),
                                        gamma_range = (1.5 , 1.5)
                                        )

        lowlightnoise_img = lowlightnoise_obj(image)
        return lowlightnoise_img
    except Exception as e:
        print(e)
        return image

def img_markup_underline(image):
    try:
        markup_underline = Markup(num_lines_range=(1, 1),
                            markup_length_range=(1, 1),
                            markup_thickness_range=(1, 2),
                            markup_type="underline",
                            markup_ink="marker",
                            markup_color=(0, 0, 0),
                            repetitions=1,
                            large_word_mode=1,
                            single_word_mode=False)

        image = markup_underline(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_pattern_generator(image):
    try:
        quasi_pattern = PatternGenerator(
                                    imgx = 512,
                                    imgy= 512,
                                    n_rotation_range = (10,15)
                                )
        image = quasi_pattern(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_shadow_cast(image):
    try:
        shadowcast = ShadowCast(shadow_side = "random",
                            shadow_vertices_range = (3, 5),
                            shadow_width_range=(0.5, 0.8),
                            shadow_height_range=(0.5, 0.8),
                            shadow_color = (0, 0, 0),
                            shadow_opacity_range=(0.2,0.8),
                            shadow_iterations_range = (1,2),
                            shadow_blur_kernel_range = (101, 301),
                            )

        image = shadowcast(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_subtle_noise(image):
    try:
        subtle_noise = SubtleNoise(subtle_range=50)
        img_subtle_noise = subtle_noise(image)
        return img_subtle_noise
    except Exception as e:
        print(e)
        return image

def img_voronoi_tessellation(image):
    try:
        voronoi_pattern = VoronoiTessellation(
                            mult_range = (80,80),
                            seed = 19829813472 ,
                            num_cells_range = (500,1000),
                            noise_type = "random",
                            background_value = (200, 256)
                            )

        img_voronoi = voronoi_pattern(image)
        return img_voronoi
    except Exception as e:
        print(e)
        return image

def img_water_mark(image):
    try:
        watermark= WaterMark(watermark_word = "random",
                            watermark_font_size = (5,10), 
                            watermark_font_thickness = (10,15), 
                            watermark_font_type = cv2.FONT_HERSHEY_SIMPLEX, 
                            watermark_rotation = (0,360) , 
                            watermark_location = "center", 
                            watermark_color = (0,0,0), 
                            watermark_method = "darken")

        image = watermark(image)
        return image
    except Exception as e:
        print(e)
        return image


def img_squish(image):
    try:
        squish = Squish(squish_direction = 1,
                    squish_location = "random",
                    squish_number_range = (5,10),
                    squish_distance_range = (5,5),
                    squish_line = "random",
                    squish_line_thickness_range = (1,1)
                    )
        padded_image = squish(image)
        return padded_image
    except Exception as e:
        print(e)
        return image


def img_noisy_line(image):
    try:
        noisylines = NoisyLines(noisy_lines_direction = 1,
                            noisy_lines_number_range = (1,1),
                            noisy_lines_color = (0, 0, 0),
                            noisy_lines_thickness_range = (3,3),
                            noisy_lines_random_noise_intensity_range = (0.1, 0.1),
                            noisy_lines_length_interval_range = (10,10),
                            noisy_lines_gaussian_kernel_value_range = (3,3),
                            noisy_lines_overlay_method = "ink_to_paper",
                            )
        image = noisylines(image)
        return image
    except Exception as e:
        print(e)
        return image

def img_scribbles(image,n_points=3):
    try:
        np.random.seed()
        line_thickness = 3
        xpoints = np.random.rand(n_points) * image.shape[0]
        ypoints = np.random.rand(n_points) * image.shape[1]
        points = list(zip(xpoints,ypoints))
        def bezier_curve(points, n_times=1000):
            n_points = len(points)
            x_points = np.array([p[0] for p in points])
            y_points = np.array([p[1] for p in points])

            t = np.linspace(0.0, 1.0, n_times)
            
            def bernstein_poly(i, n, t):
                from scipy.special import comb
                return comb(n, i) * (t**(n - i)) * (1 - t)**i
            polynomial_array = np.array(
                [bernstein_poly(i, n_points - 1, t) for i in range(0, n_points)])

            xvals = np.dot(x_points, polynomial_array)
            yvals = np.dot(y_points, polynomial_array)
            return xvals, yvals
        xvals, yvals = bezier_curve(points, n_times=1000)
        coordinates = [(int(x), int(y)) for x, y in zip(xvals, yvals)]
        for i in range(len(coordinates)):
            x_ = coordinates[i][0]
            y_ = coordinates[i][1]
            if line_thickness == 1:
                image[x_][y_] = 0
            elif line_thickness == 2:
                image[x_][y_] = 0
                image[x_ + 1][y_] = 0
                image[x_ - 1][y_] = 0
                image[x_][y_ + 1] = 0
                image[x_][y_ - 1] = 0
            elif line_thickness == 3:
                image[x_][y_] = 0
                image[x_ + 1][y_] = 0
                image[x_ + 1][y_ + 1] = 0
                image[x_ - 1][y_] = 0
                image[x_ - 1][y_ - 1] = 0
                image[x_][y_ + 1] = 0
                image[x_ - 1][y_ + 1] = 0
                image[x_][y_ - 1] = 0
                image[x_ + 1][y_ - 1] = 0
        return image
    except Exception as e:
        print(e)
        return image


def img_sharpen(image):
    try:
        sharpen = A.Sharpen(always_apply=False, p=1.0, alpha=(0.2, 0.5), lightness=(5.0, 5.0))
        image = sharpen(image=image)["image"]
        return image
    except Exception as e:
        print(e)
        return image

def img_pixeldropout(image):
    try:
        pixeldrop = A.PixelDropout(always_apply=False, p=1.0, dropout_prob=0.1, per_channel=0, drop_value=(255, 255, 255), mask_drop_value=None)
        image = pixeldrop(image=image)["image"]
        return image
    except Exception as e:
        print(e)
        return image


def img_erode(image):
    try:
        kernel_size = 3
        kernel = np.ones((kernel_size, kernel_size), np.uint8)
        image = cv2.erode(image, kernel)
        return image
    except Exception as e:  
        print(e)
        return image


def img_dilate(image):
    try:
        kernel_size = 3
        kernel = np.ones((kernel_size, kernel_size), np.uint8)
        image = cv2.dilate(image, kernel)
        return image
    except Exception as e:
        print(e)
        return image


def img_downscale(image):
    try:
        downscale = A.Downscale(always_apply=False, p=1.0, scale_range=(0.5, 0.75))
        image = downscale(image=image)["image"]
        return image
    except Exception as e:
        print(e)
        return image


def img_blur(image):
    try:
        img_blur = A.Blur(always_apply=False, p=1.0, blur_limit=(3, 10))
        image = img_blur(image=image)["image"]
        return image
    except Exception as e:
        print(e)
        return image

def img_inkbleed(image):
    try:
        quality = (0.4, 0.7)
        inkbleed = InkBleed(intensity_range=quality,
                        kernel_size=(5, 5),
                        severity=(0.2, 0.4)
                        )
        img_inkbleed = inkbleed(image)
        return img_inkbleed
    except Exception as e:
        print(e)
        return image


def img_letterpress(image):
    try:
        letterpress = Letterpress(n_samples=(200,500),
                            n_clusters=(300,800),
                            std_range=(1500, 5000),
                            value_range=(200, 255),
                            value_threshold_range=(128, 128),
                            blur=1
                            )
        img_letterpress = letterpress(image)
        return img_letterpress
    except Exception as e:
        print(e)
        return image


def img_white_dash(image):
    try:
        np.random.seed()
        height, width = image.shape[:2]
        num_lines = np.random.randint(10, 20)
        thick = 5
        for _ in range(num_lines):
            thickness = np.random.randint(1, max(2,thick))
            length = np.random.randint(5, max(6,width))
            y = np.random.randint(2, height - 4)
            line_color = (255, 255, 255)
            cv2.line(image, (0, y), (length, y), line_color, thickness)
        return image
    except Exception as e:
        print(e)
        return image

def add_foreground(fourground, image):
    foreground_mapping = {
        'white-lines': img_white_dash,
        'vertical-lines':vertical_lines,
        'inkbleed': img_inkbleed,
        'letter-press': img_letterpress,
        'img-blur': img_blur,
        'downscale': img_downscale,
        'erode': img_erode,
        'dilate': img_dilate,
        'pixel-dropout': img_pixeldropout,
        'sharpen': img_sharpen,
        'scribbles': img_scribbles,
        'noisy-lines':img_noisy_line,
        'squish':img_squish,
        'bleedthrough':img_bleedthrough,
        'BadPhotoCopy':img_badphotocopy,
        'BrightnessTexturize':img_brightness_texturize,
        'DirtyDrum':img_dirty_drum,
        'Faxify':img_faxify,
        'Hollow':img_hollow,
        'LightingGradient': img_lighting_gradient,
        'LowLightNoise':img_low_light_noise,
        'PatternGenerator':img_pattern_generator,
        'ShadowCast':img_shadow_cast,
        'SubtleNoise':img_subtle_noise,
        'VoronoiTessellation':img_voronoi_tessellation,
        'WaterMark':img_water_mark,
        "gussis_noise":gussis_noise
    }

    if fourground in foreground_mapping:
        fg_image = foreground_mapping[fourground](image)
    else:
        raise ValueError("Unknown foreground type: {}".format(fourground))
    return fg_image

if __name__ == "__main__":

    im = r'C:\Users\1657820\Desktop\image_quality_test\00ACAC94_page_11.png'
    img_name = os.path.basename(im)
    image = cv2.imread(im)
    start_time = time.time()
    fourground = "gussis_noise"
    save_path = os.path.join("results",fourground+"_"+img_name)
    fg_image = add_foreground(fourground,image)
    cv2.imwrite(save_path,fg_image)
    end_time = time.time()
    execution_time = end_time - start_time
    print(f"Execution time: {execution_time} seconds")
