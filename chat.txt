import matplotlib.pyplot as plt
import numpy as np

class EvalDataset:
    # 省略其他方法

    def plot_inference_time_vs_tokens(self, results, save_path='inference_time_vs_tokens.png'):
        plt.figure(figsize=(12, 8))

        for model_nm, (token_counts, inference_times) in results.items():
            # 添加轻微的随机偏移来避免完全重叠
            jitter_x = np.random.normal(0, 2, size=len(token_counts))  # X 轴轻微随机偏移
            jitter_y = np.random.normal(0, 0.005, size=len(inference_times))  # Y 轴轻微随机偏移

            plt.scatter(
                np.array(token_counts) + jitter_x,
                np.array(inference_times) + jitter_y,
                alpha=0.6,  # 设置透明度
                label=model_nm,
                s=30,  # 点的大小
                edgecolor='k'  # 增加边框以区分重叠点
            )

        plt.xlabel('Token Count')
        plt.ylabel('Inference Time (seconds)')
        plt.title('Inference Time vs Token Count Comparison for Models')
        plt.legend(title='Model')
        plt.savefig(save_path)
        plt.show()
        print(f"Inference time vs token count plot saved to {save_path}")


if __name__ == "__main__":
    model_list = ['minicheck', 'hhem', 'factual_consistency']
    eval_dataset = EvalDataset()
    sample_ratio = 0.1

    results = {}
    for model_nm in model_list:
        print(f"Running evaluation for {model_nm}...")
        token_counts, _, _, inference_times = eval_dataset.run(model_nm, sample_ratio=sample_ratio)
        results[model_nm] = (token_counts, inference_times)

    eval_dataset.plot_inference_time_vs_tokens(results)
