def generate_payloads(input_payload, data):
    generated_payloads = []
    
    for data_type in data:
        items = data[data_type]
        items = items if isinstance(items, list) else [items]
        
        for item in items:
            if data_type == "text":
                execution_plan_steps = {"text_bounding_policy": {}, "data_sanitation_policy": {}}
            elif data_type == "image":
                execution_plan_steps = {"image_bounding_policy": {}}
            elif data_type == "file":
                execution_plan_steps = {"file_bounding_policy": {}}
            elif data_type == "numeric":
                execution_plan_steps = {"numberic_bounding_policy": {}}
            elif data_type == "json":
                execution_plan_steps = {"payload_validator_policy": {}}
            else:
                execution_plan_steps = {}
            data_paths = item.get('data', [])
            dtype = item.get('type', [])
            data_paths = data_paths if isinstance(data_paths, list) else [data_paths]
            
            for data_path in data_paths:

                if data_path == "*":
                    data_value = "*"
                else:
                    param_key = data_path.split('.')[-1]
                    data_value = input_payload["service_params"]["job_object"].get(param_key)
                
                if not data_value:
                    continue

                policies = item.get('policies', [])
                if policies:
                    for policy in policies:
                        execution_plan_steps[policy['Statement'][0]['name']] = policy['Statement'][0]["Condition"]
    
                for execution_plan_step in execution_plan_steps:
                    execution_plan = execution_plan_steps.get(execution_plan_step)
                    payload = deepcopy(input_payload)
                    payload['service_params']['job_object'].update({"data": data_value, "data_type": dtype, "execution_plan": execution_plan, "data_id": data_path,"categary": execution_plan_step})
                    generated_payloads.append(payload)
    
    return generated_payloads


SCANNER_CATEGORIES = {
    "bounding": ["SoftwareCheck", "EncryptionDetector", "PageCount","ImageBlurCheck", "FormatCheck",
                 "ImageDimCheck", "ImageMemoryCheck", "ExecutableScript", "ProfanityCheck",
                 "HarmfulString", "PiiDetector", "BinTransform","TokenLimit"],
    "sanitation": ["RemoveUnicode", "Secrets"],
    "validator": ["JsonValidator"]
}
