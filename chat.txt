import psutil
import time
import matplotlib.pyplot as plt
import numpy as np

def plot_cpu_usage(duration=60, interval=0.5):
    # Initialize data lists
    timestamps = []
    cpu_usage = []

    start_time = time.time()

    while time.time() - start_time < duration:
        # Get the current CPU utilization as a percentage
        cpu_percent = psutil.cpu_percent(interval=interval)

        # Record the time and CPU usage
        timestamps.append(time.time() - start_time)
        cpu_usage.append(cpu_percent)

    # Smooth the data using a moving average (optional)
    window_size = 5  # Set window size for the moving average
    smoothed_cpu_usage = np.convolve(cpu_usage, np.ones(window_size)/window_size, mode='valid')

    # Create the plot
    plt.figure(figsize=(10, 6))
    plt.plot(timestamps[:len(smoothed_cpu_usage)], smoothed_cpu_usage, label='Smoothed CPU Usage', color='blue', linewidth=2)
    plt.fill_between(timestamps[:len(smoothed_cpu_usage)], smoothed_cpu_usage, color='blue', alpha=0.2)

    # Highlight specific points for clarity (optional)
    for i in range(0, len(smoothed_cpu_usage), 10):  # Add annotations every 10 points
        plt.annotate(f'{smoothed_cpu_usage[i]:.1f}%', (timestamps[i], smoothed_cpu_usage[i]),
                     textcoords="offset points", xytext=(0,5), ha='center', fontsize=8, color='black')

    # Add gridlines for easier reading
    plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)

    # Add labels and title
    plt.xlabel('Time (seconds)', fontsize=12)
    plt.ylabel('CPU Usage (%)', fontsize=12)
    plt.title('CPU Utilization Over Time', fontsize=14)
    plt.legend()

    # Show the plot
    plt.tight_layout()
    plt.show()

# Example usage: Plot CPU usage over a 60-second period, with a 0.5 second interval between samples
plot_cpu_usage(duration=60, interval=0.5)
