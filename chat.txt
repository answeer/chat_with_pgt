# Trade Document Processing System

[![Django](https://img.shields.io/badge/Django-4.2-brightgreen.svg)](https://www.djangoproject.com/)
[![PaddleOCR](https://img.shields.io/badge/PaddleOCR-2.7-blue.svg)](https://github.com/PaddlePaddle/PaddleOCR)
[![Python](https://img.shields.io/badge/Python-3.9%2B-blue.svg)](https://www.python.org/)

The Trade Document Processing System is a Django-based application that automates the extraction of structured data from trade documents like Bills of Lading using advanced OCR and Vision-Language Models.

![System Architecture](https://via.placeholder.com/800x400?text=System+Architecture+Diagram)

## Key Features

- **Document Classification**: Automatically categorizes uploaded documents
- **Entity Extraction**: Identifies key fields from documents using OCR and VLM
- **Review Workflow**: Provides interface for human verification of extracted data
- **Project Organization**: Group documents by projects with custom settings
- **OCR Integration**: Utilizes PaddleOCR for text recognition
- **VLM Processing**: Connects to Vision-Language Models for entity extraction

## Technology Stack

- **Backend**: Django 4.2
- **OCR Engine**: PaddleOCR
- **VLM Integration**: Custom API
- **Database**: PostgreSQL
- **Frontend**: HTML, CSS, JavaScript, Bootstrap
- **Task Processing**: Subprocess-based background processing

## Installation Guide

### Prerequisites

- Python 3.9+
- PostgreSQL
- PaddleOCR dependencies
- Virtual environment (recommended)

### Setup Steps

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/trade-document-processor.git
   cd trade-document-processor



Create and activate virtual environment
bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate  # Windows
Install dependencies
bash
pip install -r requirements.txt
Download OCR models
bash
mkdir -p paddle_models
cd paddle_models
wget https://paddleocr.bj.bcebos.com/PP-OCRv3/english/en_PP-OCRv3_det_infer.tar
wget https://paddleocr.bj.bcebos.com/PP-OCRv3/english/en_PP-OCRv3_rec_infer.tar
wget https://paddleocr.bj.bcebos.com/dygraph_v2.0/ch/ch_ppocr_mobile_v2.0_cls_infer.tar
tar -xvf *.tar
rm *.tar
cd ..
Configure environment variables
Create .env file:
env
DEBUG=True
SECRET_KEY=your-secret-key
DATABASE_URL=postgres://user:password@localhost/dbname
VLM_API_URL=http://localhost:5000/extract
Set up database
bash
python manage.py migrate
Create superuser
bash
python manage.py createsuperuser
Running the Application

Start Django development server
bash
python manage.py runserver
(Optional) Start VLM service
bash
# Start your VLM service on port 5000
Access the application
Main application: http://localhost:8000
Admin interface: http://localhost:8000/admin
Project Structure

text
trade-document-processor/
├── dashboard/               # Main application for UI and document management
│   ├── migrations/          # Database migrations
│   ├── templates/           # HTML templates
│   ├── models.py            # Database models
│   ├── views.py             # Application views
│   └── urls.py              # Application URL routes
├── ocr_extract/             # OCR processing module
│   ├── services/            # Business logic services
│   │   └── ocr_processor.py # OCR processing class
│   ├── tasks.py             # Background processing tasks
│   └── process_document.py  # Document processing script
├── media/                   # Uploaded files (created automatically)
├── paddle_models/           # OCR model files
├── trade_processor/         # Django project configuration
├── .env                     # Environment variables
├── manage.py                # Django management script
└── requirements.txt         # Python dependencies
Configuration

Key Settings (settings.py)

python
# Document types and extraction settings
DOCUMENT_TYPES = {
    'bill_of_lading': {
        'entities': [
            "shipment onboard date",
            "shipper name",
            "shipper address",
            # ... other entities
        ],
        'prompt': "Extraction instructions..."
    }
}

# File storage
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# OCR Configuration
PADDLE_MODELS_DIR = os.path.join(BASE_DIR, 'paddle_models')
Usage Workflow

Create a project
Define document types
Configure entities to extract
Upload documents
Upload scanned documents via web interface
Documents are queued for processing
Review extracted data
View extracted entities
Verify and correct information
Save reviewed results
Export data
Export structured data in JSON format
Download processed documents
Troubleshooting

Common Issues

Missing OCR models
text
Error: Model files not found in paddle_models/
Solution: Run the model download script
Database migration issues
text
django.db.utils.OperationalError: no such table
Solution: Run python manage.py migrate
File permission errors
text
PermissionError: [Errno 13] Permission denied
Solution: Set proper permissions on media/ directory
Debugging Tips

Check logs in document_processing.log
Verify VLM service is running on port 5000
Test OCR processing manually:
bash
python ocr_extract/process_document.py <document_id>
Contributing

Contributions are welcome! Please follow these steps:

Fork the repository
Create a new feature branch
Make your changes
Submit a pull request
License

This project is licensed under the MIT License - see the LICENSE file for details.

Contact

For support or inquiries, contact your.name@example.com

text

This README provides comprehensive documentation for your Trade Document Processing System. It includes:

1. Project overview and key features
2. Technology stack information
3. Step-by-step installation guide
4. Project structure explanation
5. Configuration details
6. Usage workflow
7. Troubleshooting section
8. Contribution guidelines

You can directly copy this markdown content into your project's README.md file. The placeholder image URL can be replaced with an actual architecture diagram when available.
