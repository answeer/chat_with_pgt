from collections import defaultdict
import os
from llm_sanitation.agent.utils.defaults import scanner_default
from llm_sanitation.agent.utils.connectors import get_usecase_mfst
from llm_sanitation.agent.utils.common import (
    get_policy,
    get_usecase_data_policies,
)
from pprint import pprint


class Planner:
    def __init__(self):
        self.scanner_default = scanner_default

    def reorder_plan(self, execution_plan):
        b_skill_order = ["payload_validator", "file_bounding", "numeric_bounding", "numeric_sanitation", "text_bounding", "text_data_sanitation", "image_bounding", "image_data_sanitation"]
        reordered_execution_plan = {}

        for b_skill in b_skill_order:
            if b_skill in execution_plan:
                reordered_execution_plan[b_skill] = execution_plan[b_skill]

        return reordered_execution_plan


    def get_exec_plan(self, usecase_mfst_nm, agent_nm="*"):

        usecase_mfst = get_usecase_mfst(usecase_mfst_nm)
        policies = get_usecase_data_policies(usecase_mfst, agent_nm)
        actions = []
        no_actions = []
        ai_skills = []
        b_skills = []
        execution_plan = {}

        for policy in policies:
            policy_json = get_policy(policy)
            stmts = policy_json["Statement"]

            for stmt in stmts:
                actions = stmt["Action"]
                no_actions = stmt["NotAction"]

                skills = defaultdict(lambda: [])

                for action in actions:
                    b_skill, ai_skill = action.split(":")

                    if ai_skill == "*":
                        skills[b_skill].extend(self.scanner_default[b_skill])
                    else:
                        skills[b_skill].append(ai_skill)

                for no_action in no_actions:
                    b_skill, ai_skill = no_action.split(":")

                    try:
                        if ai_skill == "*":
                            skills[b_skill].remove(self.scanner_default[b_skill])
                        else:
                            skills[b_skill].remove(ai_skill)
                    except ValueError:
                        pass

                skills = dict(skills)
                b_skills = skills.keys()
                for b_skill in b_skills:
                    ai_skills = skills[b_skill]
                    for ai_skill in ai_skills:
                        if b_skill not in execution_plan:
                            execution_plan[b_skill] = {}
                        execution_plan[b_skill][ai_skill] = stmt["Condition"].get(ai_skill, {})
                        # execution_plan[ai_skill] = stmt["Condition"].get(ai_skill, {})

        pprint(self.reorder_plan(execution_plan))

        return self.reorder_plan(execution_plan)


if __name__ == "__main__":
    agent = "agent1"
    planner_obj = Planner()
    execution_plan = planner_obj.get_exec_plan("usecase_manifest", agent)
    pprint(execution_plan)

    # {

    #     "payload_validator": {
    #         "JsonValidator" : {
    #                 "mandate_keys": {
    #                     "clientData.appName": [
    #                         "seige_v3"
    #                     ],
    #                     "clientData.country": [
    #                         "IN"
    #                     ]
    #                 }
    #             }
    #     }
    # }
