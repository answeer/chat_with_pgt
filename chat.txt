import os
import torch
from PIL import Image
from options.test_options import TestOptions
from models.models import create_model
from torchvision import transforms

# 1. 初始化测试选项
opt = TestOptions().parse()
opt.nThreads = 1  # 强制单线程
opt.batchSize = 1  # 单样本处理
opt.serial_batches = True  # 不打乱顺序
opt.stack = True
opt.use_dropout = False
opt.use_dropout1 = False

# 2. 定义图片预处理函数
def preprocess_image(image_path, image_size=64):
    transform = transforms.Compose([
        transforms.Grayscale(),  # 转灰度图像
        transforms.Resize((image_size, image_size)),
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))  # 归一化到 [-1, 1]
    ])
    image = Image.open(image_path)
    return transform(image).unsqueeze(0)  # 添加 batch 维度

# 3. 定义文本预处理函数
def preprocess_text(text, char_to_index, max_length=32):
    indices = [char_to_index.get(c, 0) for c in text]  # 未知字符设为 0
    if len(indices) > max_length:
        indices = indices[:max_length]
    else:
        indices.extend([0] * (max_length - len(indices)))
    return torch.tensor(indices).unsqueeze(0)  # 添加 batch 维度

# 4. 加载模型
model = create_model(opt)
model.setup(opt)  # 初始化模型

# 5. 输入路径和文本
style_image_path = "path/to/your/style_image.jpg"  # 替换为你的字体风格图片路径
output_text = "Sample Text"  # 替换为你需要生成的文本
output_image_path = "path/to/output_image.jpg"  # 输出图像保存路径

# 6. 加载字体风格图片和文本
style_image = preprocess_image(style_image_path)
char_to_index = {chr(i): i for i in range(128)}  # 简单字符索引表
text_indices = preprocess_text(output_text, char_to_index)

# 7. 生成图像
model.set_input({'style_image': style_image, 'text_indices': text_indices})
model.test()
generated_image = model.get_current_visuals()['fake_image']

# 8. 保存结果
save_image = transforms.ToPILImage()(generated_image.squeeze(0).cpu())
save_image.save(output_image_path)

print(f"Generated image saved at {output_image_path}")
