def remove_white_borders(image):
    """Remove white borders from an image using edge detection and contours."""
    # Convert to grayscale if needed
    if len(image.shape) == 3:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    else:
        gray = image

    # Threshold to create a binary image
    _, binary = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY)

    # Invert binary image
    binary = cv2.bitwise_not(binary)

    # Find contours
    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Find the largest contour
    if contours:
        largest_contour = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(largest_contour)

        # Crop the image to the bounding box
        cropped = image[y:y+h, x:x+w]
        return cropped

    # If no contour is found, return the original image
    return image

def preprocess_image(image_path):
    """Load an image and remove white borders."""
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    processed_image = remove_white_borders(image)
    return processed_image
