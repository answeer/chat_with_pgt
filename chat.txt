from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
from llm_sanitation.utils.connectors.suitability import image_xy_dpi
from llm_sanitation.utils.doc_to_img import doc_to_img
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel
# import cv2

class ImageDPICheck(Scanner):

    def __init__(self,**kwargs):
        x_dpi_thresh= kwargs["x_dpi_thresh"]
        y_dpi_thresh= kwargs["y_dpi_thresh"]
        save_folder = kwargs['save_folder']

        super().__init__("image_dpi_check", 0.5,x_dpi_thresh=x_dpi_thresh,y_dpi_thresh=y_dpi_thresh,save_folder=save_folder)

    def suaitability_placeholder(self, image_path):
        # img = cv2.imread(image_path)
        # results = {
        #             "data": {
        #                 "get_img_dimensions": {
        #                     "Image Memory Size": 303356,
        #                     "Height": 640,
        #                     "Width": 640
        #                 },
        #                 "blurriness_score": {
        #                     "Blurriness Score": 0.9098039215686274
        #                 },
        #                 "brightness_score": {
        #                     "Mean Brightness": 241,
        #                     "RMS Brightness": 246
        #                 },
        #                 "contours_estimate": {
        #                     "Contour Count": 0,
        #                     "Mean Contour Area": 0
        #                 },
        #                 "image_xy_dpi": {
        #                     "X Dpi": 25.4,
        #                     "Y Dpi": 25.4
        #                 }
        #             },
        #             "status": {
        #                 "get_img_dimensions": "success",
        #                 "blurriness_score": "success",
        #                 "brightness_score": "success",
        #                 "contours_estimate": "success",
        #                 "image_xy_dpi": "success"
        #             },
        #             "error_message": "success"
        #             }
        # url = "http://127.0.0.1:8000/api/ds_img_fet_ext"

        # payload = {
        #     "job_id":"12345",
        #     "input_img":image_path,
        #     "expected_features":["image_xy_dpi"]
        # }
        # headers = {
        # 'Content-Type': 'application/json',
        # 'Authorization': 'django-insecure-1j822l40w003!5q3j^m%#)1*+x5f+kz&njqm#aeu^(o7j1k@uv',
        # 'Userid': 'io_sanitation',
        # 'Content-Type': 'application/json'
        # }
        # response = requests.request("POST", url, headers=headers, json = payload)
        # results = response.text.encode('utf8')
        # return json.loads(results)

        results = {"data":{}}
        results["data"]["image_xy_dpi"] = image_xy_dpi(image_path)

        return results



    def predict(self,image_path):
        image_paths = doc_to_img(image_path,self._kwargs['save_folder'])

        low_dpi_pg_idx = []
        score = 1
        try:
            for ix, image_path in enumerate(image_paths):

                results = self.suaitability_placeholder(image_path)
                # x_dpi = results['data']['image_xy_dpi']['X Dpi']
                x_dpi = results['data']['image_xy_dpi'][0]['data']['image_xy_dpi']['X Dpi']
                # y_dpi = results['data']['image_xy_dpi']['Y Dpi']
                y_dpi = results['data']['image_xy_dpi'][0]['data']['image_xy_dpi']['Y Dpi']
                if x_dpi >= self._kwargs['x_dpi_thresh'] and y_dpi >= self._kwargs['y_dpi_thresh']:
                    pass
                # elif x_dpi < self._kwargs['x_dpi_thresh'] and y_dpi > self._kwargs['y_dpi_thresh']:
                #     predict = f"DPI check failed. The x DPI({x_dpi}) is lower than threshold."
                #     score = 0
                # elif x_dpi > self._kwargs['x_dpi_thresh'] and y_dpi < self._kwargs['y_dpi_thresh']:
                #     predict = f"DPI check failed. The y DPI({y_dpi}) is lower than threshold."
                #     score = 0
                else:
                    low_dpi_pg_idx.append(ix + 1)
                    score = 0
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)

        return low_dpi_pg_idx, score

    def format_response(self):
        self.response["prediction"]["blank_page_check"] = self.pred[0]
        self.response["score"] = self.pred[1]
