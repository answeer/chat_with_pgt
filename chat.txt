This RemoveUnicode scanner focuses on detecting and optionally removing invisible Unicode characters, which may include control characters, format characters, private use characters, and unassigned characters in text. These types of characters can often cause formatting issues, rendering problems, or unexpected behavior in text processing systems.

Key Components of RemoveUnicode

	1.	Unicode Category Filtering:
	•	The scanner identifies characters that belong to specific Unicode categories that are often invisible or non-printable. It does this by comparing each character in the text against a list of categories (Cf, Cc, Co, Cn) using the unicodedata library. Each of these categories represents:
	•	Cf (Format Characters): Used to control text formatting (e.g., soft hyphen).
	•	Cc (Control Characters): Used to control text flow or represent non-graphical commands (e.g., null, line feed).
	•	Co (Private Use Characters): Customizable characters for internal use, which aren’t defined by Unicode standards.
	•	Cn (Unassigned Characters): Characters that have not been assigned a specific function.
	2.	Sanitization Control:
	•	The scanner has a sanitize flag, which when enabled, actively removes detected invisible characters from the text.
	•	If sanitize is set to False, the scanner will simply report the presence of these characters without modifying the text.
	3.	Predict Function:
	•	Detection Process: The predict function first checks if the text contains any Unicode characters beyond standard ASCII (ord > 127). This quick check allows skipping the sanitization process for plain ASCII text.
	•	Character-by-Character Analysis: For text with Unicode characters, each character’s category is examined. If the character belongs to one of the banned_categories, it is removed (if sanitize is True).
	•	Logging: Detected invisible characters are listed and reported. An exception handling mechanism ensures that any errors encountered during processing are logged.

Usage and Example Scenarios

The RemoveUnicode scanner is useful in scenarios where invisible characters might disrupt downstream processes, such as:

	•	Data Cleaning: Removing control characters in data preprocessing pipelines.
	•	Document Sanitization: Cleaning documents or text fields that may contain special Unicode characters inserted inadvertently or maliciously.
	•	Text Normalization: Preparing text for systems that might mishandle or misinterpret control or invisible characters, such as legacy databases or display systems.

Example Output

Here’s how RemoveUnicode might respond:

	•	If Invisible Characters Are Detected:
	•	Prediction: "Found invisible characters in the text: <character list>"
	•	Sanitized Text: The text with all invisible characters removed.
	•	Score: 1 (if sanitized successfully) or 0 (if invisible characters remain or an error occurs).
	•	If No Invisible Characters Are Found:
	•	Prediction: "No invisible characters found"
	•	Score: 1
	•	Sanitized Text: Returns the original text unaltered.

This scanner effectively provides a way to maintain text integrity by identifying and handling invisible characters, which are often unnoticed but can cause unexpected issues.
