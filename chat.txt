import secrets
import string
import os
import yaml
import json
from pprint import pprint
from typing import Dict, Optional
from presidio_analyzer import AnalyzerEngine, RecognizerRegistryProvider
from presidio_anonymizer import AnonymizerEngine, DeanonymizeEngine, OperatorConfig
from presidio_anonymizer.operators import Operator, OperatorType

class InstanceCounterAnonymizer(Operator):
    """
    Anonymizer that replaces the entity value with an instance counter per entity.
    """

    REPLACING_FORMAT = "<{entity_type}_{index}>"

    def operate(self, text: str, params: Dict = None) -> str:
        """Anonymize the input text."""
        entity_type: str = params["entity_type"]
        entity_mapping: Dict[str, Dict] = params["entity_mapping"]

        entity_mapping_for_type = entity_mapping.setdefault(entity_type, {})
        
        # Check if the text has been anonymized previously
        if text in entity_mapping_for_type:
            return entity_mapping_for_type[text]
        
        # Generate a new replacement text
        index = len(entity_mapping_for_type)
        new_text = self.REPLACING_FORMAT.format(entity_type=entity_type, index=index)
        
        # Store the mapping
        entity_mapping_for_type[text] = new_text
        return new_text

    def validate(self, params: Dict = None) -> None:
        """Validate operator parameters."""
        if "entity_mapping" not in params or "entity_type" not in params:
            raise ValueError("Both 'entity_mapping' and 'entity_type' are required.")

    def operator_name(self) -> str:
        return "entity_counter"

    def operator_type(self) -> OperatorType:
        return OperatorType.Anonymize

class InstanceCounterDeanonymizer(Operator):
    """
    Deanonymizer that replaces the unique identifier with the original text.
    """

    def operate(self, text: str, params: Dict = None) -> str:
        """Reverse the anonymization process."""
        entity_type: str = params["entity_type"]
        entity_mapping: Dict[str, Dict] = params["entity_mapping"]

        entity_mapping_for_type = entity_mapping.get(entity_type)
        if not entity_mapping_for_type or text not in entity_mapping_for_type.values():
            raise ValueError(f"Text '{text}' not found for entity type '{entity_type}'.")

        return self._find_key_by_value(entity_mapping_for_type, text)

    @staticmethod
    def _find_key_by_value(entity_mapping, value):
        """Find the key for a given value in the mapping."""
        return next((key for key, val in entity_mapping.items() if val == value), None)

    def validate(self, params: Dict = None) -> None:
        """Validate operator parameters."""
        if "entity_mapping" not in params or "entity_type" not in params:
            raise ValueError("Both 'entity_mapping' and 'entity_type' are required.")

    def operator_name(self) -> str:
        return "entity_counter_deanonymizer"

    def operator_type(self) -> OperatorType:
        return OperatorType.Deanonymize

class PIIHandler:
    """
    PII (Personally Identifiable Information) Handling System.
    Provides masking and unmasking capabilities based on configuration.
    """

    def __init__(self, config_path: Optional[str] = None, exclusion_json_path: Optional[str] = None, consumer_id: str = None, threshold_score: float = 0.7):
        """
        Initialize PII Handler.
        
        Args:
            config_path: Path to the YAML configuration file.
            exclusion_json_path: Path to the exclusion JSON file.
            consumer_id: Consumer ID for exclusion configuration.
            threshold_score: Score threshold for PII detection.
        """
        self.config = self._load_config_from_file(config_path) if config_path else {}
        self.consumer_id = consumer_id
        self.threshold_score = threshold_score
        self.crypto_key = self._generate_crypto_key()
        
        # Initialize the Presidio components
        registry = RecognizerRegistryProvider(conf_file=config_path).create_recognizer_registry()
        self.analyzer = AnalyzerEngine(registry=registry, log_decision_process=True, supported_languages=registry.supported_languages)
        self.anonymizer = AnonymizerEngine()
        self.deanonymizer = DeanonymizeEngine()

        # Load exclusion JSON
        self.pii_exclusion_json = self._load_json(exclusion_json_path) if exclusion_json_path else {}

        # Register custom operators
        self.anonymizer.add_anonymizer(InstanceCounterAnonymizer)
        self.deanonymizer.add_deanonymizer(InstanceCounterDeanonymizer)

        # Entity mapping storage (reset per mask operation)
        self.entity_mapping = {}

    def _load_config_from_file(self, config_path: str) -> Dict:
        """Load YAML configuration from file."""
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"Config file not found: {config_path}")
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)

    def _load_json(self, json_path: str) -> Dict:
        """Load JSON data from file."""
        if not os.path.exists(json_path):
            raise FileNotFoundError(f"Exclusion JSON file not found: {json_path}")
        with open(json_path, 'r') as f:
            return json.load(f)

    def _generate_crypto_key(self, length: int = 32) -> str:
        """Generate a secure random cryptographic key."""
        alphabet = string.ascii_letters + string.digits + string.punctuation
        return ''.join(secrets.choice(alphabet) for _ in range(length))

    def mask(self, text: str) -> Dict:
        """
        Mask PII entities in text based on configuration.
        
        Args:
            text: Input text containing potential PII.
        
        Returns:
            Dictionary containing:
            - anonymized_result: Text with PII replaced.
            - entity_mapping: Mapping of original to masked values.
            - crypto_key: Generated cryptographic key.
        """
        # Detect PII entities in text
        analyzer_results = self.analyzer.analyze(text=text, language="en", score_threshold=self.threshold_score)

        # Filter out excluded entities
        excluded_entities = self.pii_exclusion_json.get(self.consumer_id, [])
        results_filtered = [result for result in analyzer_results if result.entity_type not in excluded_entities]

        # Reset mapping for new operation
        self.entity_mapping = {}

        # Anonymize detected PII entities
        anonymized_result = self.anonymizer.anonymize(
            text,
            results_filtered,
            operators={
                "DEFAULT": OperatorConfig("entity_counter", {"entity_mapping": self.entity_mapping})
            }
        )

        return {
            "anonymized_result": anonymized_result,
            "entity_mapping": self.entity_mapping,
            "crypto_key": self.crypto_key
        }

    def unmask(self, anonymized_result):
        """
        Restore original text from masked version.
        
        Args:
            anonymized_result: Text with masked PII entities.
        
        Returns:
            Original text with PII restored.
        """
        # Restore original values
        deanonymized_result = self.deanonymizer.deanonymize(
            anonymized_result.text,
            anonymized_result.items,
            operators={
                "DEFAULT": OperatorConfig("entity_counter_deanonymizer", {"entity_mapping": self.entity_mapping})
            }
        )
        return deanonymized_result.text

# Example usage
if __name__ == "__main__":
    handler = PIIHandler(config_path="guardrails_demo/pii_rules.yaml", exclusion_json_path="guardrails_demo/pii_exclusion.json", consumer_id='con_1', threshold_score=0.7)
    
    text = """My credit card number is 4095-2609-9393-4932 and my crypto wallet id is 16Yeky6GMjeNkAiNcBY7ZhrLoMSgg1BoyZ.
        On September 18 I visited microsoft.com and sent an email to test@presidio.site, from the IP 192.168.0.1.
        My phone number: (212) 555-1234.
        This is a valid International Bank Account Number: IL150120690000003111111.
        Kate's social security number is 078-05-1126. Her driver license? it is 1234567A."""
    
    # Mask the text
    results = handler.mask(text)
    print("Masked Text:")
    pprint(results["anonymized_result"].text)
    print("\nEntity Mapping:")
    pprint(results["entity_mapping"])
    print("\nCrypto Key:")
    print(results["crypto_key"])

    # Unmask the text
    unmasked_text = handler.unmask(results["anonymized_result"])
    print("\nUnmasked Text:")
    pprint(unmasked_text)
