from presidio_analyzer import AnalyzerEngine, RecognizerResult
from presidio_anonymizer import AnonymizerEngine, DeanonymizeEngine, OperatorConfig
from presidio_anonymizer.entities import OperatorResult, EngineResult
from presidio_anonymizer.operators import Operator, OperatorType
from typing import Dict, List, Optional
from pprint import pprint
import secrets
import string

class InstanceCounterAnonymizer(Operator):
    """Anonymizer which replaces PII with entity-type counters"""
    REPLACING_FORMAT = "<{entity_type}_{index}>"

    def operate(self, text: str, params: Dict = None) -> str:
        entity_type: str = params["entity_type"]
        entity_mapping: Dict = params["entity_mapping"]
        
        if entity_type not in entity_mapping:
            entity_mapping[entity_type] = {}
        
        if text in entity_mapping[entity_type]:
            return entity_mapping[entity_type][text]
        
        new_index = len(entity_mapping[entity_type])
        new_text = self.REPLACING_FORMAT.format(entity_type=entity_type, index=new_index)
        entity_mapping[entity_type][text] = new_text
        return new_text

    def validate(self, params: Dict = None) -> None:
        if "entity_mapping" not in params:
            raise ValueError("Missing `entity_mapping` parameter")
        if "entity_type" not in params:
            raise ValueError("Missing `entity_type` parameter")

    def operator_name(self) -> str:
        return "entity_counter"

    def operator_type(self) -> OperatorType:
        return OperatorType.Anonymize

class InstanceCounterDeanonymizer(Operator):
    """Deanonymizer which restores original values from entity-type counters"""
    def operate(self, text: str, params: Dict = None) -> str:
        entity_type: str = params["entity_type"]
        entity_mapping: Dict = params["entity_mapping"]
        
        if entity_type not in entity_mapping:
            raise ValueError(f"Entity type {entity_type} not found")
            
        for original, masked in entity_mapping[entity_type].items():
            if masked == text:
                return original
                
        raise ValueError(f"Masked value {text} not found for {entity_type}")

    def validate(self, params: Dict = None) -> None:
        if "entity_mapping" not in params:
            raise ValueError("Missing `entity_mapping` parameter")
        if "entity_type" not in params:
            raise ValueError("Missing `entity_type` parameter")

    def operator_name(self) -> str:
        return "entity_counter_deanonymizer"

    def operator_type(self) -> OperatorType:
        return OperatorType.Deanonymize

class PIIHandler:
    def __init__(self, config: Dict):
        self.config = config["pii_detection"]
        self.entity_mapping = {}
        
        # 自动生成32字节的crypto_key (AES256需要32字节密钥)
        self.crypto_key = self._generate_crypto_key() 
        
        # 初始化引擎
        self.analyzer = AnalyzerEngine()
        self.anonymizer = AnonymizerEngine()
        self.deanonymizer = DeanonymizeEngine()
        
        # 注册自定义操作器
        self.anonymizer.add_anonymizer(InstanceCounterAnonymizer)
        self.deanonymizer.add_deanonymizer(InstanceCounterDeanonymizer)
    
    def _generate_crypto_key(self, length: int = 32) -> str:
        """生成安全的随机加密密钥"""
        alphabet = string.ascii_letters + string.digits + string.punctuation
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    def mask(self, text: str) -> Dict:
        """匿名化处理文本"""
        if not self.config["enabled"]:
            return {
                "masked_text": text,
                "entity_mapping": {},
                "crypto_key": self.crypto_key
            }
        
        # 获取配置中指定的PII类型
        entities = self.config.get("pii_types", [])
        
        # 根据敏感度调整阈值
        sensitivity = self.config.get("sensitivity", "medium")
        threshold = 0.5 if sensitivity == "low" else 0.7
        
        # 执行PII检测
        analyzer_results = self.analyzer.analyze(
            text=text,
            language="en",
            entities=entities,
            score_threshold=threshold
        )
        
        # 重置映射
        self.entity_mapping = {}
        
        # 执行匿名化
        anonymized_result = self.anonymizer.anonymize(
            text,
            analyzer_results,
            operators={
                "DEFAULT": OperatorConfig(
                    "entity_counter",
                    {"entity_mapping": self.entity_mapping}
                )
            }
        )
        
        return {
            "masked_text": anonymized_result.text,
            "entity_mapping": self.entity_mapping,
            "crypto_key": self.crypto_key
        }
    
    def unmask(self, masked_text: str) -> str:
        """去匿名化恢复原始文本"""
        if not self.config["enabled"]:
            return masked_text
        
        # 创建伪识别结果（实际使用映射数据）
        items = [
            OperatorResult(
                start=0,
                end=0,
                entity_type=entity_type,
                operator="entity_counter"
            )
            for entity_type in self.entity_mapping.keys()
        ]
        
        # 执行去匿名化
        deanonymized_result = self.deanonymizer.deanonymize(
            masked_text,
            items,
            operators={
                "DEFAULT": OperatorConfig(
                    "entity_counter_deanonymizer",
                    {"entity_mapping": self.entity_mapping}
                )
            }
        )
        
        return deanonymized_result.text

# 使用示例
if __name__ == "__main__":
    config = {
        "guardrails": {
            "pii_detection": {
                "enabled": True,
                "sensitivity": "low",
                "pii_types": [
                    "PERSON",
                    "LOCATION"
                ]
            }
        }
    }
    
    handler = PIIHandler(config["guardrails"])
    
    text = "Peter gave his book to Heidi which later gave it to Nicole. Peter lives in London and Nicole lives in Tashkent."
    
    # 匿名化处理
    masked_data = handler.mask(text)
    print("Masked Text:")
    pprint(masked_data["masked_text"])
    print("\nEntity Mapping:")
    pprint(masked_data["entity_mapping"])
    print("\nCrypto Key:")
    print(masked_data["crypto_key"])
    
    # 去匿名化处理
    unmasked_text = handler.unmask(masked_data["masked_text"])
    print("\nUnmasked Text:")
    pprint(unmasked_text)
