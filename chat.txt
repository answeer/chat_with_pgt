from transformers import AutoModelForSequenceClassification
from minicheck.minicheck import MiniCheck
from llm_guard.output_scanners import FactualConsistency

import os
import time
import tqdm
import pandas as pd


class EvalDataset():
    def __init__(self,data_path='Consolidated.xlsx'):
        self.data_path = data_path

    def load_dataset(self):
        df = pd.read_excel(self.data_path)
        context_list = df['Context'].tolist()
        respose_list = df['answer'].tolist()
        return context_list,respose_list

    def draw_plot(self):
        pass
    
    def timepiece(self):
        pass

    def run(self,model_nm):
        context_list,respose_list = self.load_dataset()
        for context, response in zip(context_list,respose_list):
            if model_nm == "minicheck":
                scorer = MiniCheck(model_name='roberta-large', cache_dir='./ckpts')
                pred_label, raw_prob, _, _ = scorer.score(docs=[context], claims=[response])
            elif model_nm == "hhem":
                model = AutoModelForSequenceClassification.from_pretrained('models\hallucination_evaluation_model', trust_remote_code=True)
                pair = [(context,response)]
                score = model.predict(pair)
            elif model_nm == 'factual_consistency':
                model = FactualConsistency(minimum_score=0.5)
                sanitized_output, is_valid, risk_score = model.scan(context, response)


if __name__ == "__main__":
    model_list = ['minicheck','hhem','factual_consistency']
    eval_dataset = EvalDataset()
    for model_nm in model_list:
        eval_dataset.run(model_nm)
