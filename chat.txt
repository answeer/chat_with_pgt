import psutil
import matplotlib.pyplot as plt
from threading import Thread
import time

def monitor_cpu_usage(interval=0.1, duration=10):
    """Monitors and logs CPU usage over time."""
    cpu_usage = []
    start_time = time.time()
    while time.time() - start_time < duration:
        cpu_usage.append(psutil.cpu_percent(interval=interval))
    return cpu_usage

def plot_cpu_utilization(cpu_usage, mode):
    """Plots CPU utilization over time."""
    plt.figure(figsize=(10, 6))
    plt.plot(cpu_usage, label=f"CPU Utilization ({mode})")
    plt.title(f"CPU Utilization - {mode} Execution")
    plt.xlabel("Time (in 0.1s intervals)")
    plt.ylabel("CPU Usage (%)")
    plt.legend()
    plt.show()

def execute_with_monitoring(action_obj, execution_plan, data, save_path, mode):
    """Runs action and monitors CPU utilization."""
    duration = 10  # Set duration of monitoring (seconds)
    
    # Start monitoring CPU utilization in a separate thread
    monitor_thread = Thread(target=monitor_cpu_usage, args=(0.1, duration))
    monitor_thread.start()

    # Run the action
    start_time = time.time()
    result, error_code, error_message = action_obj.run_action(
        execution_plan,
        data,
        save_path
    )
    end_time = time.time()
    
    # Wait for monitoring to complete
    monitor_thread.join()

    # Log and plot results
    print(f"Execution time for {mode}: {end_time - start_time:.2f} seconds")
    plot_cpu_utilization(cpu_usage=monitor_cpu_usage(), mode=mode)

# Sequential Execution
print("Running Sequential Execution:")
action_obj_seq = Action(default_scanner_path, async_mode=False, **kwargs)
execute_with_monitoring(action_obj_seq, payload["service_params"]["job_object"]["execution_plan"],
                        payload["service_params"]["job_object"]["data"],
                        payload["job_params"]["save_path"], mode="Sequential")

# Parallel Execution
print("Running Parallel Execution:")
action_obj_par = Action(default_scanner_path, async_mode=True, **kwargs)
execute_with_monitoring(action_obj_par, payload["service_params"]["job_object"]["execution_plan"],
                        payload["service_params"]["job_object"]["data"],
                        payload["job_params"]["save_path"], mode="Parallel")
