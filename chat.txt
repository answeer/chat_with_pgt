from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.scanners.sanitizers.remove_emoctions.emoctions import EMOTICONS_EMO
import re
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class RemoveEmoticons(Scanner):

    def __init__(self, **kwargs):
        sanitize = kwargs["sanitize"]
        convert = kwargs.get("convert", False)
        super().__init__("text_emoticons", 0.5,sanitize=sanitize, convert = convert)

    def predict(self, data):
        sanitized_data = data
        try:
            if self._kwargs["convert"]:
                for emot in EMOTICONS_EMO:
                    sanitized_data = sanitized_data.replace(emot, "_".join(EMOTICONS_EMO[emot].replace(",","").split()))
                    # sanitized_data = re.sub(u'('+emot+')', "_".join(EMOTICONS_EMO[emot].replace(",","").split()), sanitized_data)
            else:
                # emoticon_pattern = re.compile(u'(' + u'|'.join(k for k in EMOTICONS_EMO) + u')')
                # sanitized_data = emoticon_pattern.sub(r'', sanitized_data)
                for emot in EMOTICONS_EMO:
                    sanitized_data.replace(emot, "")

            score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            score = 0

        return score, sanitized_data

    def format_response(self):
        self.response["score"] = self.pred[0]
        self.response['sanitized_data'] = self.pred[1]
