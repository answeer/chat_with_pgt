def execute_with_monitoring(action_obj, execution_plan, data, save_path, mode):
    # 用于在一个列表中存储 CPU 使用率数据
    cpu_usage_data = []

    def monitor_cpu():
        nonlocal cpu_usage_data
        cpu_usage_data = monitor_cpu_usage(interval=0.1, duration=10)

    # 启动监控线程
    monitor_thread = Thread(target=monitor_cpu)
    monitor_thread.start()

    # 开始时间记录
    start_time = time.time()

    # 执行扫描操作
    action_obj.run_action(execution_plan, data, save_path)

    # 结束时间记录
    end_time = time.time()

    # 等待监控线程完成
    monitor_thread.join()

    # 打印执行时间
    print(f"Execution time for {mode}: {end_time - start_time:.2f} seconds")

    # 使用监控到的数据进行绘图
    plot_cpu_utilization(cpu_usage_data, mode)
