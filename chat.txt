def validate_schema_structure(data: dict, schema: dict) -> tuple[bool, str]:
    """
    Validate and auto-update schema structure based on input data.
    
    Ensures:
    1. All keys in data exist in schema's required list (auto-add missing)
    2. All data keys have corresponding property definitions in schema
    
    Args:
        data: Input data structure to validate against schema
        schema: Schema definition to validate/update (modified in-place)
    
    Returns:
        tuple: (success_status, error_message)
        - success_status: True if validation passes, False otherwise
        - error_message: Description of validation failure (None if success)
    
    Raises:
        ValueError: If schema structure is invalid for nested validation
    """
    
    def check_node(data_node: any, schema_node: dict, path: str = "") -> tuple[bool, str]:
        """
        Recursive validation for nested structures
        
        Args:
            data_node: Current node in data structure
            schema_node: Corresponding schema node definition
            path: Dot-path notation for error tracking (e.g., 'parent.child')
        
        Returns:
            tuple: (success_status, error_message)
        """
        # Handle object/dictionary nodes
        if isinstance(data_node, dict):
            # Validate schema node is configured for object type
            if schema_node.get("type") != "object":
                return False, f"Path '{path}': Schema expects non-object type"
            
            # Get schema requirements and properties
            required = schema_node.setdefault("required", [])
            properties = schema_node.setdefault("properties", {})
            
            for key, value in data_node.items():
                # Build path notation for error reporting
                current_path = f"{path}.{key}" if path else key
                
                # Auto-add missing keys to required list
                if key not in required:
                    required.append(key)
                
                # Validate property definition exists
                if key not in properties:
                    return False, f"Undefined property '{current_path}' in schema"
                
                # Recursive check for nested properties
                success, msg = check_node(
                    value, 
                    properties[key], 
                    current_path
                )
                if not success:
                    return False, msg
                
            return True, None
        
        # Handle array/list nodes
        elif isinstance(data_node, list):
            # Validate schema node is configured for array type
            if schema_node.get("type") != "array":
                return False, f"Path '{path}': Schema expects non-array type"
            
            # Verify array item definition exists
            items_schema = schema_node.get("items")
            if not items_schema:
                return False, f"Path '{path}': Missing array item definition"
            
            # Validate all array elements
            for idx, item in enumerate(data_node):
                element_path = f"{path}[{idx}]"
                success, msg = check_node(item, items_schema, element_path)
                if not success:
                    return False, msg
                
            return True, None
        
        # Primitive types (string/number/boolean) require no further validation
        else:
            return True, None
    
    # --- Main validation execution ---
    try:
        return check_node(data, schema)
    except Exception as e:
        raise ValueError(f"Schema validation failed: {str(e)}") from e
