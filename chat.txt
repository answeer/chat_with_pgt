import json
import os

"""
Django settings for swoosh_image_synthesizer project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "llm_sanitation.apps.MlConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "llm_sanitation.middleware.header-authentication.ImageSynthHeaderAuthMiddleware",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"

# configmap reading


def get_current_config():
    CONFIG = ""
    try:
        with open("/etc/config/" + "swoosh-io-validator.json") as c:  # for prod
            CONFIG = json.load(c)
    except FileNotFoundError:
        with open("./swoosh-io-validator.json") as c:  # for local test
            CONFIG = json.load(c)

    return CONFIG


CONFIG = get_current_config()

JOB_ID = "NA"


def get_file_content(path):
    if os.path.isfile(path):
        value = open(path, "r").read()
        return str(value)


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

APPS_PW = "swoosh_apps_password"
DB_SECRET_PATH = "./etc/db-secret-volume"

DB_SCHEMA = get_file_content(os.path.join(DB_SECRET_PATH, "swoosh_apps_schemaname")) # pragma: no cover
DB_HOST = get_file_content(os.path.join(DB_SECRET_PATH, "db_hostname")) # pragma: no cover
DB_PORT = get_file_content(os.path.join(DB_SECRET_PATH, "db_port")) # pragma: no cover
DB_NAME = get_file_content(os.path.join(DB_SECRET_PATH, "db_name")) # pragma: no cover
db_user = get_file_content(os.path.join(DB_SECRET_PATH, "swoosh_apps_username")) # pragma: no cover
db_pd = get_file_content(os.path.join(DB_SECRET_PATH, APPS_PW))


# Heartbeat files
HB_FILE_PATH = CONFIG.get("HB_FILE_PATH") # pragma: no cover
HB_FILE_NAME = "heartbeat.txt" # pragma: no cover

guardrails_comp_version = os.getenv("version")
ARG_PW = 'PASSWORD'
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "OPTIONS": {
            "options": "-c search_path=django," + DB_SCHEMA,
            "sslmode": "require"
        },
        "NAME": DB_NAME,
        "USER": db_user,
        ARG_PW: db_pd,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTH_TOKEN = get_file_content("./etc/swoosh-metadata/swoosh_auth_token") # pragma: no cover
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = AUTH_TOKEN
