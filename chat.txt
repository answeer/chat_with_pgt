def transform_coordinates(bounding_boxes, matrix, image_shape):
    """
    Transforms bounding box coordinates using the given affine transformation matrix.

    Args:
        bounding_boxes: List of bounding boxes [(x_min, y_min, x_max, y_max), ...].
        matrix: 2x3 affine transformation matrix.
        image_shape: Shape of the aligned image (height, width).

    Returns:
        Transformed bounding boxes as a list [(x_min, y_min, x_max, y_max), ...].
    """
    transformed_boxes = []
    for box in bounding_boxes:
        # Define the box corners
        points = np.array([
            [box[0], box[1], 1],  # Top-left
            [box[2], box[3], 1]   # Bottom-right
        ])
        
        # Apply the affine transformation
        transformed_points = np.dot(matrix, points.T).T

        # Extract new bounding box coordinates
        x_min, y_min = transformed_points[0][:2]
        x_max, y_max = transformed_points[1][:2]

        # Ensure the bounding box is within image boundaries
        x_min = max(0, min(image_shape[1], x_min))
        y_min = max(0, min(image_shape[0], y_min))
        x_max = max(0, min(image_shape[1], x_max))
        y_max = max(0, min(image_shape[0], y_max))

        transformed_boxes.append((x_min, y_min, x_max, y_max))

    return transformed_boxes


def draw_bounding_boxes(image, bounding_boxes):
    """
    Draw bounding boxes on the image.
    
    Args:
        image: Aligned image (numpy array).
        bounding_boxes: List of bounding boxes in the form [(x_min, y_min, x_max, y_max), ...].
        
    Returns:
        Image with bounding boxes drawn.
    """
    image_with_boxes = image.copy()
    if len(image_with_boxes.shape) == 2:  # Convert grayscale to BGR for visualization
        image_with_boxes = cv2.cvtColor(image_with_boxes, cv2.COLOR_GRAY2BGR)

    for i, box in enumerate(bounding_boxes):
        x_min, y_min, x_max, y_max = map(int, box)
        cv2.rectangle(image_with_boxes, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)
        cv2.putText(image_with_boxes, f"Box {i+1}", (x_min, y_min - 10), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
    
    return image_with_boxes
