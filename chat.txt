class FormatCheck(Scanner):
    """
    A class to check if a given file's format is valid based on a predefined list of acceptable formats.

    This class extends the `Scanner` base class and provides functionality to validate the file format 
    by checking its suffix against a provided list of acceptable formats.

    Attributes:
        format_list (list): A list of valid file formats to check against.

    Methods:
        predict(file):
            Checks the file format and returns a prediction message and score.

        format_response():
            Formats the prediction response to include the result of the format check and the corresponding score.
    """

    def __init__(self, **kwargs):
        """
        Initializes the FormatCheck instance and sets up the list of valid formats.

        Args:
            **kwargs: Additional keyword arguments, specifically 'format_list', which is a list of valid formats.
        """
        format_list = kwargs["format_list"]
        super().__init__("format_check", 0.5, format_list=format_list)

    def predict(self, file):
        """
        Checks the file format by comparing the file's suffix against the provided list of valid formats.

        Args:
            file (str): The file name or path to be checked.

        Returns:
            tuple: A tuple containing the prediction message (str) and the corresponding score (int).
                   A score of 1 indicates a valid format, while a score of 0 indicates an invalid format.
        """
        try:
            file_suffix = file.split('.')[-1]
            if file_suffix in self._kwargs['format_list']:
                score = 1
                predict = "valid format"
            else:
                score = 0
                predict = "invalid format"
        except Exception as e:
            predict = "Error occurred: {}".format(e)
            score = 0
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)

        return predict, score

    def format_response(self):
        """
        Formats the prediction response to include the result of the format check and the corresponding score.

        This method modifies the response dictionary to include the format check result under the "format" key 
        and the corresponding score under the "score" key.
        """
        self.response["prediction"]["format"] = self.pred[0]
        self.response["score"] = self.pred[1]
