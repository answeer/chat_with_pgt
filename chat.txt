from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
import hashlib
import filecmp
import os
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class FileIntegrity(Scanner):

    def __init__(self, **kwargs):
        reference = kwargs["reference"]
        super().__init__("file_integrity",  1, reference=reference)

    def calculate_file_hash(self,file_path, hash_type='sha256'):

        hash_func = getattr(hashlib, hash_type)()

        with open(file_path, 'rb') as f:
            while chunk := f.read(8192):
                hash_func.update(chunk)

        return hash_func.hexdigest()

    def predict(self, file_path,hash_type='sha256'):
        reference = self._kwargs['reference']
        try:
            if os.path.isfile(reference):
                file_integrity =  filecmp.cmp(file_path, reference, shallow=False)
                if file_integrity:
                    predict = "File is integrtity."
                    score = 1
                else:
                    predict = "File is NOT integrtity, please check the input file."
                    score = 0

            else:
                actual_hash = self.calculate_file_hash(file_path, hash_type)
                if actual_hash == reference:
                    predict = "File is integrtity."
                    score = 1
                else:
                    predict = "File is NOT integrtity, please check the input file."
                    score = 0
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occured: {}".format(e)
            score = 0
        return predict, score

    def format_response(self):
        self.response["prediction"]["file_integrity"] = self.pred[0]
        self.response["score"] = self.pred[1]
