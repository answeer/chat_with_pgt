Trade Document Processing System
https://img.shields.io/badge/Django-092E20?style=for-the-badge&logo=django&logoColor=green
https://img.shields.io/badge/PaddleOCR-FF6F00?style=for-the-badge&logo=paddlepaddle&logoColor=white
https://img.shields.io/badge/PostgreSQL-316192?style=for-the-badge&logo=postgresql&logoColor=white

The Trade Document Processing System is a comprehensive solution for extracting structured data from trade documents like Bills of Lading, invoices, and contracts using advanced OCR and AI technologies.

Key Features

Document Classification: Automatically classifies uploaded documents
Entity Extraction: Extracts key information from documents
Visual Review: Displays extracted data with visual bounding boxes
Project Management: Organize documents by projects
Validation Workflow: Review and validate extracted information
Technology Stack

Backend: Django 4.x
OCR Engine: PaddleOCR
AI Processing: MiniCPM VLM
Database: PostgreSQL
Frontend: HTML/CSS/JS with Bootstrap
Task Processing: Subprocess-based background tasks
Installation

Prerequisites

Python 3.9+
PostgreSQL 14+
PaddlePaddle & PaddleOCR
MiniCPM VLM service
Setup Instructions

Clone the repository:
bash
git clone https://github.com/your-username/trade-document-processor.git
cd trade-document-processor
Create and activate virtual environment:
bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate    # Windows
Install dependencies:
bash
pip install -r requirements.txt
Set up environment variables:
Create .env file:
env
SECRET_KEY='your-django-secret-key'
DATABASE_URL='postgres://user:password@localhost/dbname'
VLM_API_URL='http://localhost:5000/extract'
DEBUG=True
Download OCR models:
bash
mkdir -p paddle_models
cd paddle_models
wget https://paddleocr.bj.bcebos.com/PP-OCRv3/english/en_PP-OCRv3_det_infer.tar
wget https://paddleocr.bj.bcebos.com/PP-OCRv3/english/en_PP-OCRv3_rec_infer.tar
wget https://paddleocr.bj.bcebos.com/dygraph_v2.0/ch/ch_ppocr_mobile_v2.0_cls_infer.tar
tar -xvf *.tar
rm *.tar
cd ..
Run database migrations:
bash
python manage.py migrate
Create superuser:
bash
python manage.py createsuperuser
Run the development server:
bash
python manage.py runserver
Configuration

Document Types and Entities

Define document types in Django admin:

Go to /admin
Navigate to Dashboard > Document Types
Add document types with their extraction entities
Example for Bill of Lading:

json
{
  "shipment_onboard_date": "",
  "shipper_name": "",
  "shipper_address": "",
  "consignee_name": "",
  "transport_document_number": ""
}
VLM Service Setup

The system requires a running VLM (Vision-Language Model) service. By default, it expects the service at http://localhost:5000/extract.

To set up the VLM service:

Clone and install MiniCPM-VLM
Start the service:
bash
python -m minicpmv.serve --model path/to/model
Usage

Web Interface

Create a Project:
Navigate to /dashboard
Click "Create Project"
Select document types for the project
Upload Documents:
Go to project detail page
Click "Upload Document"
Select a document image (PNG, JPG)
Review Extracted Data:
After processing completes, click "Review"
Verify and edit extracted entities
Save reviewed data
API Endpoints

The system provides these main API endpoints:

Document Upload:
text
POST /dashboard/upload_document/<project_id>/
Document Processing Status:
text
POST /dashboard/check_document_status/
Body: {"document_ids": [1, 2, 3]}
Document Review:
text
POST /dashboard/submit_review/<document_id>/
Project Structure

text
trade-document-processor/
├── dashboard/              # Main application
│   ├── migrations/         # Database migrations
│   ├── templates/          # HTML templates
│   ├── models.py           # Database models
│   ├── views.py            # Application views
│   └── urls.py             # Application URLs
├── ocr_extract/            # OCR processing module
│   ├── services/
│   │   └── ocr_processor.py # Document processing logic
│   ├── tasks.py            # Background task management
│   └── process_document.py # Document processing script
├── media/                  # Uploaded files
├── static/                 # Static assets
├── trade_document_processor/ # Project configuration
│   ├── settings.py         # Django settings
│   ├── urls.py             # Project URLs
│   └── wsgi.py             # WSGI configuration
├── .env                    # Environment variables
├── manage.py               # Django management script
└── requirements.txt        # Python dependencies
Customization

Adding New Document Types

Create a new Document Type in Django admin
Define the entities to extract in JSON format
Add any domain-specific knowledge to the knowledge base field
Modifying Extraction Logic

Edit ocr_processor.py:

python
class DocumentProcessor:
    # ...
    
    def create_prompt(self, doc_type: str) -> str:
        # Customize extraction prompts here
        if doc_type == 'custom_document':
            return "Custom extraction instructions..."
Troubleshooting

Issue: "No module named 'dashboard'" in background processing
Solution: Ensure Django environment is properly set in process_document.py

Issue: OCR models not found
Solution: Verify models are in paddle_models/ and paths are correct

Issue: VLM service connection failed
Solution: Check if VLM service is running at VLM_API_URL

Issue: File not found during processing
Solution: Verify MEDIA_ROOT setting and file permissions

License

This project is licensed under the MIT License - see the LICENSE file for details.

Contributing

Contributions are welcome! Please follow these steps:

Fork the repository
Create a feature branch (git checkout -b feature/your-feature)
Commit your changes (git commit -am 'Add some feature')
Push to the branch (git push origin feature/your-feature)
Open a pull request
Developed by [Your Name]
Contact: your.email@example.com
Version: 1.0.0
