from copy import deepcopy

SCANNER_CATEGORIES = {
    "bounding": ["SoftwareCheck", "EncryptionDetector", "PageCount","ImageBlurCheck", "FormatCheck",
                 "ImageDimCheck", "ImageMemoryCheck", "ExecutableScript", "ProfanityCheck",
                 "HarmfulString", "PiiDetector", "BinTransform","TokenLimit"],
    "sanitation": ["RemoveUnicode", "Secrets"],
    "validator": ["JsonValidator"]
}

POLICY_TYPE_MAPPING = {
    "text": ["bounding", "sanitation"],
    "image": ["bounding"],
    "file": ["bounding"],
    "numeric": ["bounding"],
    "json": ["validator"]
}

def generate_dynamic_steps(data_type):
    """动态生成策略步骤容器"""
    steps = {}
    for policy_type in POLICY_TYPE_MAPPING.get(data_type, []):
        step_name = f"{data_type}_{policy_type}_policy"
        steps[step_name] = {}
    return steps

def detect_policy_category(condition):
    """根据检测器类型自动归类策略"""
    if not isinstance(condition, dict):
        return None
        
    # 深度遍历条件字典寻找检测器
    detectors = []
    stack = [condition]
    while stack:
        current = stack.pop()
        if isinstance(current, dict):
            for k, v in current.items():
                if k == "detector" and isinstance(v, str):
                    detectors.append(v)
                elif isinstance(v, (dict, list)):
                    stack.append(v)
        elif isinstance(current, list):
            stack.extend(current)
    
    # 匹配分类
    for detector in detectors:
        for category, patterns in SCANNER_CATEGORIES.items():
            if any(pattern in detector for pattern in patterns):
                return category
    return None

def generate_payloads(input_payload, data):
    generated_payloads = []
    
    for data_type in data:
        items = data[data_type]
        items = items if isinstance(items, list) else [items]
        
        for item in items:
            # 动态初始化策略容器
            execution_plan_steps = generate_dynamic_steps(data_type)
            
            # 处理策略声明
            policies = item.get('policies', [])
            for policy in policies:
                for statement in policy.get('Statement', []):
                    # 安全获取策略名称
                    step_name = statement.get('name") or "unnamed_policy"
                    
                    # 自动检测策略类型
                    condition = statement.get("Condition", {})
                    detected_category = detect_policy_category(condition)
                    
                    # 生成最终策略标识
                    if detected_category:
                        final_step = f"{data_type}_{detected_category}_policy"
                    else:
                        final_step = f"{data_type}_custom_policy"
                    
                    # 合并策略配置
                    execution_plan_steps.setdefault(final_step, {}).update({
                        step_name: condition
                    })

            # 处理数据路径...（保持原有逻辑）
            # ...（此处省略数据路径处理部分，保持与之前相同的逻辑）
            
            # 生成最终payload
            for step_name, step_config in execution_plan_steps.items():
                if step_config:  # 只生成有实际配置的策略
                    new_payload = deepcopy(input_payload)
                    # ...（保持原有payload组装逻辑）
                    generated_payloads.append(new_payload)
    
    return generated_payloads
