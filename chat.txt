from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
import fitz
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class PinnedFile(Scanner):

    def __init__(self, **kwargs):
        super().__init__("pinned_file", 0.5)

    def predict(self, file_path):
        try:
            # file_format = file_path.split('.')[-1]
            # if file_format != "pdf":
            #     predict = "The format:{} is not support.".format(file_format)
            #     score = 0
            document = fitz.open(file_path)
            file_name = []
            for page_num in range(document.page_count):
                page = document[page_num]
                annot = page.first_annot
                if annot is not None:
                    file_info = annot.file_info
                    file_name.append(file_info['filename'])
            if len(file_name) == 0:
                predict = "No atttached file found."
                score = 1
            else:
                predict = "Found attached file(s), named: {}".format(', '.join(file_name))
                score = 0
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occured: {}".format(e)
            score = 0
        return predict, score

    def format_response(self):
        self.response["prediction"]["pinned_file"] = self.pred[0]
        self.response["score"] = self.pred[1]
