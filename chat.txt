from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
import fitz
import tempfile
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class ConvertPDF(Scanner):

    def __init__(self, **kwargs):
        zoom_factor = kwargs['zoom_factor']
        save_path = kwargs['save_path']
        super().__init__("convert_pdf", 0.5,zoom_factor=zoom_factor,save_path=save_path)

    def predict(self, input_path):
        try:
            file_name = os.path.splitext(os.path.basename(input_path))[0]
            doc_output_path = tempfile.gettempdir()
            doc = fitz.open(input_path)
            mat = fitz.Matrix(self._kwargs['zoom_factor'], self._kwargs['zoom_factor'])
            result = fitz.open()
            for page_no in range(1, doc.page_count + 1):
                # Image conversion
                os.makedirs(doc_output_path, exist_ok=True)
                page = doc.load_page(page_no - 1) # Index of fitz different from textract response
                pix = page.get_pixmap(matrix=mat)
                img_path = os.path.join(doc_output_path, "page_" + str(page_no) + ".png")
                pix.save(img_path)

                img = fitz.open(img_path)  # open pic as document
                rect = img[0].rect  # pic dimension
                pdfbytes = img.convert_to_pdf()  # make a PDF stream
                img.close()  # no longer needed
                img_pdf = fitz.open("pdf", pdfbytes)  # open stream as PDF
                page = result.new_page(width=rect.width,  # new page with ...
                                        height=rect.height)  # pic dimension
                page.show_pdf_page(rect, img_pdf, 0)  # image fills the page
            doc.close()
            file_path = os.path.join(self._kwargs['save_path'], file_name + "_converted.pdf")
            result.save(file_path)
            result.close()
            predict = "Convert PDF successful. Saved the converted PDF in: {}".format(file_path)
            score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occured: {}".format(e)
            score = 0
        return predict, score
 
    def format_response(self):
        self.response["prediction"]["convert_pdf"] = self.pred[0]
        self.response["score"] = self.pred[1]
