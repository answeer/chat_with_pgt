from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
from PIL import Image
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class ImageSizeCheck(Scanner):

    def __init__(self,**kwargs):
        img_size_thresh = kwargs['img_size_thresh']
        super().__init__("img_size", 0.5,img_size_thresh=img_size_thresh)

    def predict(self,image_path):
        try:
            extn = os.path.split(image_path)[-1].split(".")[-1].lower()
            if extn in ["tiff", "tif", "png", "jpg", "jpeg"]:
                img = Image.open(image_path)
                height, weidth = img.size
                height_thresh, weidth_thresh = self._kwargs['img_size_thresh']
                if height >= height_thresh and weidth >= weidth_thresh:
                    predict = f"The image size {(height,weidth)} for this image is valid."
                    score = 1
                else:
                    predict = f"The image size for this image is NOT valid, image size is {(height,weidth)}. Please double check the image and upload an valid image with enough size."
                    score = 0

            else:
                predict = "Doc Type '{}' not supported".format(extn)
                score = 0
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occured: {}".format(e)
            score = 0

        return predict, score

    def format_response(self):
        self.response["prediction"]["img_size"] = self.pred[0]
        self.response["score"] = self.pred[1]
