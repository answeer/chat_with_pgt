import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt

# 前面的filter_empty_text, calculate_centers等函数保持不变...

# 使用编辑距离的准确率计算函数
def char_accuracy(gt, ocr):
    """使用编辑距离计算字符级准确率（优化内存）"""
    if not gt and not ocr:
        return 1.0
    
    n, m = len(gt), len(ocr)
    
    # 特殊情况处理
    if n == 0:
        return 0.0
    if m == 0:
        return 0.0
    
    # 使用两行数组优化内存
    prev = list(range(m + 1))
    curr = [0] * (m + 1)
    
    for i in range(1, n + 1):
        curr[0] = i
        for j in range(1, m + 1):
            cost = 0 if gt[i - 1] == ocr[j - 1] else 1
            curr[j] = min(
                prev[j] + 1,        # 删除
                curr[j - 1] + 1,    # 插入
                prev[j - 1] + cost   # 替换
            )
        prev, curr = curr, prev  # 交换数组
    
    edit_distance = prev[m]
    max_len = max(n, m)
    return 1.0 - (edit_distance / max_len)

def word_accuracy(gt, ocr):
    """使用编辑距离计算单词级准确率（优化内存）"""
    gt_words = gt.split()
    ocr_words = ocr.split()
    
    if not gt_words and not ocr_words:
        return 1.0
    
    n, m = len(gt_words), len(ocr_words)
    
    # 特殊情况处理
    if n == 0:
        return 0.0
    if m == 0:
        return 0.0
    
    # 使用两行数组优化内存
    prev = list(range(m + 1))
    curr = [0] * (m + 1)
    
    for i in range(1, n + 1):
        curr[0] = i
        for j in range(1, m + 1):
            cost = 0 if gt_words[i - 1] == ocr_words[j - 1] else 1
            curr[j] = min(
                prev[j] + 1,        # 删除
                curr[j - 1] + 1,    # 插入
                prev[j - 1] + cost   # 替换
            )
        prev, curr = curr, prev  # 交换数组
    
    edit_distance = prev[m]
    max_words = max(n, m)
    return 1.0 - (edit_distance / max_words)

# 其他函数保持不变...
def process_gt(gt_df):
    # ...（与之前相同）

def process_ocr(ocr_df, tolerance_factor=0.5, min_line_height=5, visualize=False):
    # ...（与之前相同）

def evaluate_ocr(gt_path, ocr_path, 
                tolerance_factor=0.5, 
                min_line_height=5,
                visualize=False):
    """主评估函数 - 使用编辑距离计算准确率"""
    try:
        # 读取数据
        gt_df = pd.read_excel(gt_path)
        ocr_df = pd.read_excel(ocr_path)
        
        print(f"Ground Truth 原始条目数: {len(gt_df)}")
        print(f"OCR 结果原始条目数: {len(ocr_df)}")
        
        # 处理文本（移除所有换行符）
        gt_text = process_gt(gt_df)
        ocr_text = process_ocr(ocr_df, 
                              tolerance_factor=tolerance_factor,
                              min_line_height=min_line_height,
                              visualize=visualize)
        
        # 计算准确率
        char_acc = char_accuracy(gt_text, ocr_text)
        word_acc = word_accuracy(gt_text, ocr_text)
        
        # 计算编辑距离（用于报告）
        def calc_edit_distance(s1, s2):
            n, m = len(s1), len(s2)
            if n == 0 or m == 0:
                return max(n, m)
            prev = list(range(m + 1))
            curr = [0] * (m + 1)
            for i in range(1, n + 1):
                curr[0] = i
                for j in range(1, m + 1):
                    cost = 0 if s1[i - 1] == s2[j - 1] else 1
                    curr[j] = min(prev[j] + 1, curr[j - 1] + 1, prev[j - 1] + cost)
                prev, curr = curr, prev
            return prev[m]
        
        char_edit_dist = calc_edit_distance(gt_text, ocr_text)
        
        gt_words = gt_text.split()
        ocr_words = ocr_text.split()
        word_edit_dist = calc_edit_distance(gt_words, ocr_words) if gt_words or ocr_words else 0
        
        return {
            "char_accuracy": f"{char_acc:.4%}",
            "word_accuracy": f"{word_acc:.4%}",
            "char_edit_distance": char_edit_dist,
            "word_edit_distance": word_edit_dist,
            "gt_text": gt_text,
            "ocr_text": ocr_text,
            "gt_length": len(gt_text),
            "ocr_length": len(ocr_text),
            "gt_words": len(gt_words),
            "ocr_words": len(ocr_words)
        }
    
    except Exception as e:
        import traceback
        print(f"处理过程中发生错误: {str(e)}")
        traceback.print_exc()
        return {
            "error": str(e),
            "char_accuracy": "0.00%",
            "word_accuracy": "0.00%"
        }

# 使用示例
if __name__ == "__main__":
    results = evaluate_ocr(
        "ground_truth.xlsx", 
        "ocr_results.xlsx",
        tolerance_factor=0.5,
        min_line_height=5,
        visualize=False
    )
    
    if "error" not in results:
        print("\n===== 评估结果 =====")
        print(f"字符准确率: {results['char_accuracy']}")
        print(f"单词准确率: {results['word_accuracy']}")
        print(f"\n详细统计:")
        print(f"字符编辑距离: {results['char_edit_distance']}")
        print(f"单词编辑距离: {results['word_edit_distance']}")
        print(f"Ground Truth 总字符数: {results['gt_length']}")
        print(f"OCR 结果总字符数: {results['ocr_length']}")
        print(f"Ground Truth 总单词数: {results['gt_words']}")
        print(f"OCR 结果总单词数: {results['ocr_words']}")
        
        # 保存处理后的文本用于人工检查
        with open("processed_gt.txt", "w", encoding="utf-8") as f:
            f.write(results["gt_text"])
        
        with open("processed_ocr.txt", "w", encoding="utf-8") as f:
            f.write(results["ocr_text"])
        
        print("\n处理后的文本已保存为 processed_gt.txt 和 processed_ocr.txt")
