import cv2 
import numpy as np

def denoise_document(image):

    # Step 1: Use a median filter to remove small noise points
    denoised = cv2.medianBlur(image, 3)

    # Step 2: Use morphological operations to remove larger noise patches
    # Perform opening operation (erosion followed by dilation)
    kernel = np.ones((2, 2), np.uint8)
    morph = cv2.morphologyEx(denoised, cv2.MORPH_OPEN, kernel)

    # Ensure 'morph' is a single-channel grayscale image 
    # (it should already be single-channel, but this is to ensure safety)
    if len(morph.shape) != 2:
        morph = cv2.cvtColor(morph, cv2.COLOR_BGR2GRAY)

    # Step 3: Remove isolated small regions (noise patches)
    # Find all connected components and filter out small areas
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(morph, connectivity=8)

    # Iterate through all components and keep only larger regions
    for i in range(1, num_labels):  # 0 is the background, so we start from 1
        area = stats[i, cv2.CC_STAT_AREA]
        if area < 500:  # Set an area threshold, smaller areas are considered noise
            morph[labels == i] = 0  # Set noise regions to black

    # Step 4 (optional): Use adaptive thresholding to enhance contrast and make the document clearer
    final = cv2.adaptiveThreshold(morph, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)

    return final


def img_denoise(doc_img_path, texture_img_path):

    # Load the document image and background texture image
    doc_img = cv2.imread(doc_img_path)
    bg_img = cv2.imread(texture_img_path)

    # Convert both images to grayscale
    doc_gray = cv2.cvtColor(doc_img, cv2.COLOR_BGR2GRAY)
    bg_gray = cv2.cvtColor(bg_img, cv2.COLOR_BGR2GRAY)

    # Calculate the difference between the images
    diff = cv2.absdiff(doc_gray, bg_gray)

    # Use OTSU method to automatically select a threshold
    _, mask = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Create a three-channel mask
    mask_3ch = cv2.merge([mask, mask, mask])

    # Apply the mask to keep the document part and set the background to white or transparent
    foreground = cv2.bitwise_and(doc_img, mask_3ch)

    # Set the background part to white (you can set it to other colors or make it transparent)
    background = np.full_like(doc_img, 255)  # Background is white
    result = np.where(mask_3ch == 0, background, foreground)
    
    # Apply denoising to the resulting image
    final = denoise_document(result)

    return final


if __name__ == '__main__':
    
    doc_img = r"denoise\EEB69405-6BBC-40AB-AB1C-301DBCC47730.tif_font_default_synth.tif_gen1.tif_page15_image.png"
    texture_img = r"denoise\texture.png"
    
    # Perform denoising on the document
    denoise_img = img_denoise(doc_img, texture_img)
    
    # Save the denoised image
    cv2.imwrite('denoise_img.jpg', denoise_img)
