from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
import os
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class ImageMemoryCheck(Scanner):

    def __init__(self,**kwargs):
        max_size = kwargs["max_size"]
        min_size = kwargs["min_size"]
        super().__init__("img_memory", 0.5, max_size=max_size, min_size=min_size)

    def predict(self,image_path):
        try:
            img_memory = os.path.getsize(image_path) / 1024
            if img_memory <= self._kwargs['max_size'] and img_memory >= self._kwargs['min_size']:
                predict = f"The image memory for this document is valid, memory size is {img_memory:.2f} KB."
                score = 1
            else:
                predict = f"The image memory for this image is NOT valid, memory size is {img_memory:.2f} KB."
                score = 0
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occured: {}".format(e)
            score = 0
        return predict, score

    def format_response(self):
        self.response["prediction"]["img_memory"] = self.pred[0]
        self.response["score"] = self.pred[1]
