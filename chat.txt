# ocr_api.py
from flask import Flask, request, jsonify
import os
import cv2
import numpy as np
from paddleocr import PaddleOCR

app = Flask(__name__)

# 初始化轻量级OCR模型
ocr = PaddleOCR(
    use_angle_cls=False,
    lang='en',
    rec_model_dir='models/ocr/rec/mobile',
    det_model_dir='models/ocr/det/mobile',
    use_gpu=False
)

@app.route('/ocr', methods=['POST'])
def ocr_endpoint():
    try:
        if 'image' not in request.files:
            return jsonify({"success": False, "error": "No image provided"}), 400
        
        # 读取上传的图像
        file = request.files['image']
        img_bytes = file.read()
        nparr = np.frombuffer(img_bytes, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # 临时保存图像（可选）
        temp_path = f"temp_{int(time.time())}.jpg"
        cv2.imwrite(temp_path, img)
        
        # 执行OCR
        result = ocr.ocr(temp_path, cls=False)
        
        # 清理临时文件
        os.remove(temp_path)
        
        # 处理OCR结果
        ocr_results = []
        for line in result:
            if line is None:
                continue
            for word_info in line:
                if word_info is None:
                    continue
                text = word_info[1][0]
                confidence = word_info[1][1]
                points = word_info[0]
                
                # 转换为[x, y, width, height]格式
                xs = [p[0] for p in points]
                ys = [p[1] for p in points]
                x_min, x_max = min(xs), max(xs)
                y_min, y_max = min(ys), max(ys)
                
                ocr_results.append({
                    "text": text,
                    "confidence": float(confidence),
                    "bbox": {
                        "x": x_min,
                        "y": y_min,
                        "width": x_max - x_min,
                        "height": y_max - y_min
                    }
                })
        
        return jsonify({
            "success": True,
            "results": ocr_results
        })
    
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
