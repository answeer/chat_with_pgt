from neo4j import GraphDatabase
import re

with open("neo4j\\llm_inferred.txt", "r") as f:
    data = f.read()

pattern = re.compile(r"(\w+):([\w\s'-]+?)--(\w+)-->(\w+):([\w\s&(),'-]+)")

def parse_line(line):
    match = pattern.match(line.strip())
    if match:
        return {
            "from_label": match.group(1).strip(),
            "from_name": match.group(2).strip(),
            "rel_type": match.group(3).strip(),
            "to_label": match.group(4).strip(),
            "to_name": match.group(5).strip()
        }
    else:
        return None

# config Neo4j connection
uri = "bolt://10.198.52.109:7687" 
username = "neo4j"
password = "SwooshAdmin@2024"

driver = GraphDatabase.driver(uri, auth=(username, password))

def create_node_rel(tx, from_label, from_name, rel_type, to_label, to_name):
    tx.run("""
        MERGE (a:%s {name: $from_name})
        MERGE (b:%s {name: $to_name})
        MERGE (a)-[r:%s]->(b)
    """ % (from_label, to_label, rel_type),
    from_name=from_name,
    to_name=to_name)

with driver.session() as session:
    lines = [line for line in data.split('\n') if line.strip()]
    batch_size = 100 
    
    for i in range(0, len(lines), batch_size):
        batch = lines[i:i+batch_size]
        parsed_data = [parse_line(line) for line in batch]
        valid_data = [item for item in parsed_data if item is not None]
        # 执行批量操作
        session.execute_write(
            lambda tx: [
                create_node_rel(tx, 
                    item["from_label"],
                    item["from_name"],
                    item["rel_type"],
                    item["to_label"],
                    item["to_name"]
                ) for item in valid_data
            ]
        )
        print(f"process {i + len(batch)}/{len(lines)} lines")

with driver.session() as session:
    session.run("CREATE INDEX FOR (n:Framework) ON (n.name)")
    session.run("CREATE INDEX FOR (n:Policy) ON (n.name)")
    session.run("CREATE INDEX FOR (n:Standard) ON (n.name)")
    session.run("CREATE INDEX FOR (n:Standards) ON (n.name)")

driver.close()
print("completed!")
