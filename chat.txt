def _format_validation_errors(self, errors: List[ValidationError]) -> str:
    """合并所有错误消息为单一字符串"""
    return "\n".join(f"JSON Validation Error: {err.message}" for err in errors)

def predict(self, payload: Any) -> Tuple[str, float]:  # 修改返回类型为 str
    parsed_payload, parse_error = self.check_json_format(payload)
    if parse_error is not None:
        return f"Invalid JSON format: {parse_error}", 0.0  # 直接返回字符串

    try:
        errors = list(self.validator.iter_errors(parsed_payload))
        if not errors:
            return "Valid JSON payload", 1.0  # 返回纯字符串
        else:
            return self._format_validation_errors(errors), 0.0  # 直接返回合并后的字符串
    except SchemaError as e:
        return f"Internal Schema Error: {e.message}", 0.0
    except Exception as e:
        LogUtil.log(LogType.ERROR, LogLevel.ERROR, f"Unexpected error: {e}")
        return f"Validation failed: {e}", 0.0

# 使用示例：
errors, score = validator.predict({"name": 123})
print(errors)  # 输出类型为 str，例如：
# "JSON Validation Error: 123 is not of type 'string'\nJSON Validation Error: 'email' is a required property"
