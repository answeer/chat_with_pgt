class ImageMemoryCheck(Scanner):
    """
    A class to check the memory size of an image and validate it against specified minimum and maximum size thresholds.

    This class extends the `Scanner` base class and provides functionality to determine if an image file's memory size 
    falls within a defined range (in KB).

    Attributes:
        max_size (float): The maximum allowable size for the image in kilobytes (KB).
        min_size (float): The minimum allowable size for the image in kilobytes (KB).

    Methods:
        predict(image_path):
            Checks the memory size of the image and validates it against the specified thresholds.

        format_response():
            Formats the prediction response to include the result of the memory check and the corresponding score.
    """

    def __init__(self, **kwargs):
        """
        Initializes the ImageMemoryCheck instance and sets up the memory size thresholds.

        Args:
            **kwargs: Additional keyword arguments, including 'max_size' (maximum allowable image size in KB) 
                      and 'min_size' (minimum allowable image size in KB).
        """
        max_size = kwargs["max_size"]
        min_size = kwargs["min_size"]
        super().__init__("img_memory", 0.5, max_size=max_size, min_size=min_size)

    def predict(self, image_path):
        """
        Checks the memory size of the image and validates it against the specified thresholds.

        Args:
            image_path (str): The file path of the image to be checked.

        Returns:
            tuple: A tuple containing a prediction message (str) indicating whether the image size is valid 
                   and the corresponding score (int).
                   A score of 1 indicates that the image size is within the valid range, while a score of 0 indicates that it is not.
        """
        try:
            img_memory = os.path.getsize(image_path) / 1024
            if self._kwargs['min_size'] <= img_memory <= self._kwargs['max_size']:
                predict = f"The image memory for this document is valid, memory size is {img_memory:.2f} KB."
                score = 1
            else:
                predict = f"The image memory for this image is NOT valid, memory size is {img_memory:.2f} KB."
                score = 0
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occurred: {}".format(e)
            score = 0
        return predict, score

    def format_response(self):
        """
        Formats the prediction response to include the result of the memory check and the corresponding score.

        This method modifies the response dictionary to include the prediction result under the 
        "img_memory" key and the corresponding score under the "score" key.
        """
        self.response["prediction"]["img_memory"] = self.pred[0]
        self.response["score"] = self.pred[1]
