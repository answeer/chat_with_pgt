import fasttext
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

# 自定义的FastText模型封装为scikit-learn的estimator
class FastTextEstimator(BaseEstimator, TransformerMixin):
    def __init__(self, lr=0.1, epoch=25, wordNgrams=2):
        self.lr = lr
        self.epoch = epoch
        self.wordNgrams = wordNgrams
        self.model = None

    def fit(self, X, y):
        # FastText的输入需要是字符串列表，其中每个字符串是一个样本
        # 这里假设X已经是这样的格式
        self.model = fasttext.train_supervised(input=X, lr=self.lr, epoch=self.epoch, wordNgrams=self.wordNgrams)
        return self

    def predict(self, X):
        # 预测逻辑
        predictions = [self.model.predict(x).split('__')[-1] for x in X]
        return np.array(predictions)

    def score(self, X, y):
        # 评分函数，使用准确率作为评分标准
        predictions = self.predict(X)
        return accuracy_score(y, predictions)

# 加载数据（这里需要你根据自己的数据集来实现）
def load_data():
    # ... 加载数据逻辑 ...
    # 返回数据和标签
    return X, y

# 主函数
def main():
    X, y = load_data()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # 定义参数网格
    param_grid = {
        'lr': [0.01, 0.1, 1],
        'epoch': [10, 25, 50],
        'wordNgrams': [1, 2, 3]
    }

    # 创建FastTextEstimator实例
    fasttext_estimator = FastTextEstimator()

    # 使用GridSearchCV进行网格搜索
    grid_search = GridSearchCV(estimator=fasttext_estimator, param_grid=param_grid, scoring='accuracy', cv=3, n_jobs=-1)
    grid_search.fit(X_train, y_train)

    # 输出最佳参数和最佳得分
    print("Best parameters found: ", grid_search.best_params_)
    print("Best accuracy found: ", grid_search.best_score_)

    # 使用最佳模型进行预测并评估
    best_model = grid_search.best_estimator_
    y_pred = best_model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print("Test accuracy with best model: ", accuracy)

if __name__ == "__main__":
    main()
