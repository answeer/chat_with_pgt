import os
from PIL import Image

def process_images_in_folder(input_folder, output_folder):
    # Ensure output folder exists
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Function to process image - replace this with your actual image processing algorithm
    def dummy_image_processing(img):
        # For demonstration purposes, this dummy algorithm just splits and merges the image
        img1 = img.rotate(45)  # Rotate the image by 45 degrees
        img2 = img.transpose(Image.FLIP_LEFT_RIGHT)  # Flip the image horizontally
        return [img1, img2]

    # Iterate over all files in the input folder
    for filename in os.listdir(input_folder):
        if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
            file_path = os.path.join(input_folder, filename)
            with Image.open(file_path) as img:
                original_mode = img.mode
                original_size = img.size

                # Convert to RGB if the image is not in RGB mode
                if original_mode != 'RGB':
                    img = img.convert('RGB')

                # Process the image using the provided algorithm
                processed_images = dummy_image_processing(img)

                # Convert processed images back to original mode and size
                processed_images = [im.convert(original_mode).resize(original_size) for im in processed_images]

                # Save the processed images
                for idx, processed_img in enumerate(processed_images):
                    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_processed_{idx+1}.png")
                    processed_img.save(output_path)

# Example usage
input_folder = 'path_to_input_folder'
output_folder = 'path_to_output_folder'
process_images_in_folder(input_folder, output_folder)

