from presidio_analyzer import AnalyzerEngine, PatternRecognizer
from presidio_anonymizer import AnonymizerEngine
from presidio_anonymizer.entities import OperatorConfig
import uuid
import re

class PIIGuardRails:
    def __init__(self, custom_entities=None):
        """
        初始化GuardRails模块
        :param custom_entities: 自定义实体识别规则，格式：[{"name": "实体名", "regex": r"正则表达式", "score": 置信度}]
        """
        # 创建分析器
        self.analyzer = AnalyzerEngine()
        
        # 添加自定义实体识别
        if custom_entities:
            for entity in custom_entities:
                pattern_recognizer = PatternRecognizer(
                    supported_entity=entity["name"],
                    patterns=[entity["regex"]],
                    context=[],
                    deny_list=[],
                    supported_language="en"
                )
                self.analyzer.registry.add_recognizer(pattern_recognizer)
        
        # 创建匿名化引擎
        self.anonymizer = AnonymizerEngine()
        
        # 存储反掩码映射关系
        self.unmask_mapping = {}

    def mask_text(self, text: str, mask_char: str = "*") -> str:
        """
        对文本中的敏感信息进行掩码处理
        :param text: 原始文本
        :param mask_char: 掩码字符
        :return: 掩码后的文本
        """
        # 检测敏感实体
        results = self.analyzer.analyze(text=text, language="en")
        
        # 生成掩码配置
        operators = {}
        for result in results:
            entity_type = result.entity_type
            
            # 为每个实体生成唯一标识符用于后续反掩码
            placeholder = f"[{entity_type}_{uuid.uuid4().hex[:6]}]"
            
            # 存储原始值与掩码占位符的映射
            original_value = text[result.start:result.end]
            self.unmask_mapping[placeholder] = original_value
            
            # 配置替换操作符
            operators[entity_type] = OperatorConfig(
                operator_name="replace",
                params={"new_value": placeholder}
            )
        
        # 执行掩码操作
        anonymized_result = self.anonymizer.anonymize(
            text=text,
            analyzer_results=results,
            operators=operators
        )
        
        # 二次处理：用掩码字符替换占位符
        masked_text = anonymized_result.text
        for placeholder in self.unmask_mapping:
            masked_text = masked_text.replace(
                placeholder, 
                mask_char * len(self.unmask_mapping[placeholder])
        
        return masked_text

    def unmask_text(self, masked_text: str) -> str:
        """
        将掩码后的文本恢复为原始文本
        :param masked_text: 掩码后的文本
        :return: 原始文本
        """
        unmasked_text = masked_text
        for placeholder, original_value in self.unmask_mapping.items():
            # 创建匹配占位符的正则模式（考虑可能的转义）
            pattern = re.escape(placeholder)
            unmasked_text = re.sub(pattern, original_value, unmasked_text)
        return unmasked_text

    def reset_mapping(self):
        """清除存储的映射关系"""
        self.unmask_mapping = {}


if __name__ == "__main__":
    # 示例配置
    custom_entities = [
        {
            "name": "CUSTOM_ID",
            "regex": r"\b[A-Z]{2}-\d{4}\b",  # 匹配类似 AB-1234 的ID
            "score": 0.9
        }
    ]
    
    # 初始化GuardRails
    guardrails = PIIGuardRails(custom_entities=custom_entities)
    
    # 原始文本
    sample_text = "John Doe's phone is 555-123-4567 and his ID is AB-1234."
    
    # 执行掩码
    masked_text = guardrails.mask_text(sample_text)
    print("Masked Text:", masked_text)
    # 输出: **** ****'s phone is ************ and his ID is ********.
    
    # 执行反掩码
    unmasked_text = guardrails.unmask_text(masked_text)
    print("Unmasked Text:", unmasked_text)
    # 输出: John Doe's phone is 555-123-4567 and his ID is AB-1234.
    
    # 重置映射（可选）
    guardrails.reset_mapping()
