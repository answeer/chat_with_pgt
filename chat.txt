from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
from pypdf import PdfReader
from PIL import Image
from PIL.ExifTags import TAGS
import re
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class SoftwareCheck(Scanner):

    def __init__(self,**kwargs):
        self.software_blacklist = kwargs["software_blacklist"]
        super().__init__("software_check", 0.5)

    def pdf_software_validator(self, software):
        """
        Validates the creator software / software in the metadata to see if they are any of the potentially blacklist ones
        """
        if software==None:
            tampered = "Software details are not available"
            score = 1
        elif software in self.software_blacklist:
            tampered = "Potentially tampered using '{}'".format(software)
            score = 0
        else:
            tampered = "Potentially not tampered, Software useed for creation is '{}'".format(software)
            score = 1
        return tampered,score

    def predict(self,file_path):
        file_format = os.path.split(file_path)[-1].split(".")[-1].lower()
        try:
            if file_format == "pdf":
                self.reader = PdfReader(file_path)
                software = self.reader.metadata.producer
            else:
                image = Image.open(file_path)
                exif_data = image.getexif()
                if exif_data is not None:
                    exif = {TAGS.get(tag,tag): value for tag, value in exif_data.items()}
                    software = exif.get("Software",None)
            if software is not None:
                software = re.sub(r'\d+', '', re.sub(r'[^a-zA-Z\s]', '', software)).rstrip()
            software_tampering,score = self.pdf_software_validator(software)
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
        return software_tampering,score


    def format_response(self):
        self.response["prediction"]["software_check"] = self.pred[0]
        self.response["score"] = self.pred[1]
