from llm_sanitation.scanners.scanner_base import Scanner
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class TextLemmatizer(Scanner):
    """
    A Scanner class that performs lemmatization on text data.

    This class uses NLTK's `WordNetLemmatizer` to reduce words to their base or root form.
    If sanitization is enabled, the lemmatized text is returned.

    Attributes:
        sanitize (bool): Flag to indicate whether to perform the sanitization.

    Methods:
        predict(data: str) -> tuple:
            Lemmatizes the provided text and returns a score and the lemmatized text.
        
        format_response() -> None:
            Formats the response by assigning the score and sanitized text to the response dictionary.
    """

    def __init__(self, **kwargs):
        """
        Initializes the TextLemmatizer scanner.

        Args:
            sanitize (bool): Flag indicating whether the text should be sanitized by lemmatizing words.
        """
        sanitize = kwargs["sanitize"]
        super().__init__("text_lemmetizer", 0.5, sanitize=sanitize)

    def predict(self, data):
        """
        Lemmatizes the provided text data.

        This method uses the NLTK `WordNetLemmatizer` to reduce words in the input text to their base form.

        Args:
            data (str): The input text to lemmatize.

        Returns:
            tuple: A tuple containing a score (1 for success, 0 for failure) and the lemmatized text.
        """
        tokens = []
        sanitized_data = data
        score = 0
        try:
            lemmatizer = WordNetLemmatizer()
            input_str = word_tokenize(data)
            for word in input_str:
                tokens.append(lemmatizer.lemmatize(word))
            sanitized_data = " ".join(tokens)

            score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)

        return score, sanitized_data

    def format_response(self):
        """
        Formats the scanner's response.

        Assigns the score and sanitized text to the response dictionary, making them 
        available for further processing or output.
        """
        self.response["score"] = self.pred[0]
        self.response['sanitized_data'] = self.pred[1]
