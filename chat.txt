from abc import ABC, abstractmethod
from guardrails.hub import CorrectLanguage
from guardrails import Guard

class AbstractGuard(ABC):
    @abstractmethod
    def validate(self, text: str) -> bool:
        pass

    @abstractmethod
    def fix(self, text: str) -> str:
        pass

    @abstractmethod
    def predict_model(self, input_text: str) -> str:
        pass

    @abstractmethod
    def create_response(self, prediction: str) -> str:
        pass

class LanguageGuard(AbstractGuard):
    def __init__(self, expected_language: str, threshold: float):
        self.guard = Guard().use(
            CorrectLanguage(expected_language_iso=expected_language, threshold=threshold, on_fail="fix")
        )

    def validate(self, text: str) -> bool:
        try:
            self.guard.validate(text)
            return True
        except Exception:
            return False

    def fix(self, text: str) -> str:
        try:
            fixed_output = self.guard.parse(llm_output=text)
            return fixed_output
        except Exception:
            return text

    def predict_model(self, input_text: str) -> str:
        # 这里是一个模拟模型预测的示例
        return f"Predicted output for: {input_text}"

    def create_response(self, prediction: str) -> str:
        # 根据预测创建响应
        return f"Response: {prediction}"

class TextProcessor:
    def __init__(self, guard: AbstractGuard):
        self.guard = guard

    def process_text(self, text: str) -> str:
        if self.guard.validate(text):
            prediction = self.guard.predict_model(text)
            return self.guard.create_response(prediction)
        else:
            fixed_text = self.guard.fix(text)
            prediction = self.guard.predict_model(fixed_text)
            return self.guard.create_response(prediction)

# 使用ABC类的示例
language_guard = LanguageGuard(expected_language="en", threshold=0.75)
text_processor = TextProcessor(language_guard)

# Validate text
print("Validation for 'Thank you':", text_processor.process_text("Thank you"))  # Validator passes
print("Validation for 'Danke':", text_processor.process_text("Danke"))  # Validator fails and fixes

# Parse the text
text = "我的邮箱地址"
output = text_processor.process_text(text)

# Print the output
print("Parsed output:", output)
