# ocr_extract/tasks.py
import subprocess
import sys
import os
from django.conf import settings

def run_in_background(document_id):
    """在后台进程中运行文档处理"""
    # 获取当前 Python 解释器路径
    python_path = sys.executable
    
    # 获取当前模块路径
    module_path = os.path.dirname(os.path.abspath(__file__))
    script_path = os.path.join(module_path, "process_document.py")
    
    # 构建命令
    command = f'"{python_path}" "{script_path}" {document_id}'
    
    # 根据操作系统选择启动方式
    if os.name == 'nt':  # Windows
        subprocess.Popen(
            command, 
            shell=True,
            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP | subprocess.DETACHED_PROCESS
        )
    else:  # Unix/Linux/Mac
        subprocess.Popen(
            command, 
            shell=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True
        )

# 创建独立的处理脚本
# 在同一个目录下创建 process_document.py



# ocr_extract/process_document.py
import os
import sys
import django
import time
import tempfile

# 设置 Django 环境
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')
django.setup()

from dashboard.models import Document
from ocr_extract.services.ocr_processor import DocumentProcessor

def process_document(document_id):
    print(f"Starting processing for document {document_id}")
    start_time = time.time()
    
    document = Document.objects.get(id=document_id)
    try:
        document.status = 'processing'
        document.save()
        
        # 创建临时文件
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            for chunk in document.image.chunks():
                tmp_file.write(chunk)
            tmp_path = tmp_file.name
        
        # 处理文档
        processor = DocumentProcessor()
        result = processor.process_document(tmp_path)
        
        # 更新文档状态
        if result['success']:
            document.status = 'processed'
            document.doc_type = result.get('doc_type', '')
            document.entities = result.get('results', {})
            document.processing_time = result.get('processing_time', 0)
            print(f"Successfully processed document {document_id}")
        else:
            document.status = 'failed'
            document.error_message = result.get('error', 'Unknown error')
            print(f"Failed to process document {document_id}: {document.error_message}")
        
        document.save()
    except Exception as e:
        document.status = 'failed'
        document.error_message = str(e)
        document.save()
        print(f"Error processing document {document_id}: {str(e)}")
    finally:
        # 清理临时文件
        if tmp_path and os.path.exists(tmp_path):
            os.remove(tmp_path)
        
        elapsed = time.time() - start_time
        print(f"Completed processing for document {document_id} in {elapsed:.2f} seconds")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python process_document.py <document_id>")
        sys.exit(1)
    
    document_id = int(sys.argv[1])
    process_document(document_id)


# dashboard/views.py
from django.shortcuts import get_object_or_404, redirect, render
from django.views.decorators.csrf import csrf_exempt
from .forms import ProjectForm
from .models import Document, Project, DocumentType
from django.http import JsonResponse
from django.contrib import messages
import json
import yaml
from ocr_extract.tasks import run_in_background  # 修改导入

# ... 其他函数保持不变 ...

@csrf_exempt
def upload_document(request, project_id):
    project = get_object_or_404(Project, pk=project_id)

    if request.method == "POST":
        uploaded_file = request.FILES.get("document")
        if uploaded_file:
            document = Document.objects.create(
                status="pending",
                entities={},
                reviewed_entities={},
                review=False,
                project=project,
                name=uploaded_file.name,
                image=uploaded_file,
            )
            
            # 使用 subprocess 启动后台处理
            run_in_background(document.id)
            
            messages.success(request, "Document uploaded and processing started!")
            return redirect("dashboard:project_detail", pk=project_id)

    return render(request, "dashboard/upload_document.html", {"project": project})
