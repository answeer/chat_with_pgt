import threading
import psutil
import matplotlib.pyplot as plt
import time
import os

def record_cpu_usage(duration=100, window_size=50, interval=1, file_name="cpu_usage.png"):
    """
    记录当前进程的CPU使用率，并保存为图表。
    :param duration: 记录总时长（秒）
    :param window_size: 图表可视的数据点个数
    :param interval: 采样的时间间隔（秒）
    :param file_name: 保存图表的文件名
    """
    x_data, y_data = [], []
    process = psutil.Process(os.getpid())

    for frame in range(duration):
        cpu_usage = process.cpu_percent(interval=interval)
        x_data.append(frame * interval)
        y_data.append(cpu_usage)

        if len(x_data) > window_size:
            x_data.pop(0)
            y_data.pop(0)

    # 绘制静态图表
    plt.figure()
    plt.plot(x_data, y_data)
    plt.title("Main Program CPU Usage Over Time")
    plt.xlabel("Time (s)")
    plt.ylabel("CPU Usage (%)")
    plt.savefig(file_name)
    plt.close()

def main_program():
    print("开始执行主程序...")
    # 这里是主程序的代码块
    # 例如，执行一些繁重任务
    for i in range(10):
        print(f"任务 {i + 1} 执行中...")
        # 模拟任务持续时间
        time.sleep(5)

if __name__ == "__main__":
    # 创建一个线程用于记录CPU使用率
    cpu_thread = threading.Thread(target=record_cpu_usage, args=(100, 50, 1, "cpu_usage_during_task.png"))
    cpu_thread.start()

    # 执行主程序
    main_program()

    # 确保 CPU 使用记录在主程序完成后结束
    cpu_thread.join()
