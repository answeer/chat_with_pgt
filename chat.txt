def transform_coordinates(bounding_boxes, matrix, image_shape):
    """
    Transform bounding boxes using the given transformation matrix.

    Args:
        bounding_boxes: List of bounding boxes in the form [(x_min, y_min, x_max, y_max), ...].
        matrix: Transformation matrix (3x3 for perspective transform).
        image_shape: Shape of the aligned image (height, width).

    Returns:
        Transformed bounding boxes as a list of [(x_min, y_min, x_max, y_max), ...].
    """
    transformed_boxes = []
    for box in bounding_boxes:
        x_min, y_min, x_max, y_max = box

        # Convert bounding box to four corners
        corners = np.array([
            [x_min, y_min],
            [x_max, y_min],
            [x_max, y_max],
            [x_min, y_max]
        ], dtype="float32")

        # Add a dimension for perspective transform
        corners = np.array(corners).reshape(-1, 1, 2)

        # Apply perspective transform
        transformed_corners = cv2.perspectiveTransform(corners, matrix)

        # Convert back to bounding box format
        x_coords = transformed_corners[:, 0, 0]
        y_coords = transformed_corners[:, 0, 1]
        transformed_boxes.append((
            int(np.min(x_coords)),
            int(np.min(y_coords)),
            int(np.max(x_coords)),
            int(np.max(y_coords))
        ))

    return transformed_boxes
