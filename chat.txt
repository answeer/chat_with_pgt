from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
import unicodedata
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class RemoveUnicode(Scanner):

    def __init__(self, **kwargs):
        sanitize = kwargs["sanitize"]
        super().__init__("invisible_text_check", 0.5, sanitize=sanitize)
        # 'Cf' (Format characters), 'Cc' (Control characters), 'Co' (Private use characters), and 'Cn' (Unassigned characters)
        self.banned_categories = ["Cf", "Cc", "Co", "Cn"]

    @staticmethod
    def contains_unicode(text: str):
        return any(ord(char) > 127 for char in text)

    def predict(self,data):
        sanitized_text = data
        score = 0
        try:
            if not self.contains_unicode(data):
                predict = "No invisible characters found"
                score = 1
            else:
                chars = []
                for char in data:
                    if unicodedata.category(char) not in self.banned_categories:
                        continue

                    chars.append(char)
                    data = data.replace(char, "")
                if chars:
                    predict = "Found invisible characters in the text:{}".format(', '.join(chars))
                    sanitized_text = data
                else:
                    predict = "No invisible characters found"
                    score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
        
        return predict, score, sanitized_text

    def format_response(self):
        self.response["prediction"]["invisible_text_check"] = self.pred[0]
        self.response["score"] = self.pred[1]
        self.response['sanitized_data'] = self.pred[2]
