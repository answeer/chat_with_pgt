from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
from PIL import Image
import pypdf
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel


class PageCount(Scanner):

    def __init__(self, **kwargs):
        self.page_thresh = kwargs["page_thresh"]
        super().__init__("page_count", 0.5, page_thresh=self.page_thresh)

    def predict(self, file_path):
        file_type = file_path.split(".")[-1].lower()
        # if file_type not in ['pdf','jpg','png','jpeg']:
        #     self.response['error_code'].append("ERR002")
        try:
            if file_type == "pdf":
                doc = pypdf.PdfReader(file_path)
                page_count = len(doc.pages)
            elif file_type == "tiff" or "tif":
                img = Image.open(file_path)
                page_count = img.n_frames
            else:
                predict = "Unsupport file format. Only support tiff and pdf now."
                score = 0
                return predict, score
            if page_count> self._kwargs['page_thresh']:
                predict = "The page count({}) for this file is exceeded threshlod.".format(page_count)
                score = 0
            else:
                predict = "Valid page count({}) for this file.".format(page_count)
                score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            predict = "Error occured: {}".format(e)
            score = 0
        return predict, score

    def format_response(self):
        self.response["prediction"]["page_count"] = self.pred[0]
        self.response["score"] = self.pred[1]
