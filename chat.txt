import os
import cv2
import torch
import numpy as np
import argparse
import pathlib
from tqdm import tqdm  # 新增进度条库

from utils import util
import options.options as option
from models import create_model

import torchvision.transforms as transforms


def main():
    # 配置参数解析
    parser = argparse.ArgumentParser()
    parser.add_argument('--opt', type=str, default='./options/test.yml', help='Path to option YAML file.')
    parser.add_argument('--input_dir', type=str, required=True, help='Input directory containing images')
    parser.add_argument('--output_dir', type=str, required=True, help='Output directory for processed images')
    args = parser.parse_args()

    # 加载配置文件
    opt = option.parse(args.opt, is_train=False)
    opt['dist'] = False

    # 创建输出目录
    os.makedirs(args.output_dir, exist_ok=True)

    # 初始化模型
    model = create_model(opt)
    # 加载预训练权重
    para = {}
    for k, v in torch.load(opt['path']['pretrain_model_G']).items():
        para['module.'+k] = v
    model.netG.load_state_dict(para, strict=True)
    model.netG.eval()

    # 支持的图片格式
    supported_ext = ['.png', '.jpg', '.jpeg', '.bmp', '.tif', '.tiff']
    
    # 获取文件列表（提前统计总数）
    input_path = pathlib.Path(args.input_dir)
    img_files = [f for f in input_path.iterdir() if f.suffix.lower() in supported_ext]
    total_files = len(img_files)

    # 初始化进度条
    progress_bar = tqdm(total=total_files, 
                      desc="Processing Images", 
                      unit="image",
                      bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]")

    # 遍历处理文件
    for img_path in img_files:
        try:
            # 更新进度描述
            progress_bar.set_postfix(file=img_path.name[:15]+"...", refresh=False)
            
            # 读取图片
            image = cv2.imread(str(img_path))
            if image is None:
                raise IOError(f"无法读取图像文件: {img_path}")

            # 预处理
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            transform = transforms.ToTensor()
            tensor_image = transform(image).unsqueeze(0)

            # 模型推理
            with torch.no_grad():
                output = util.single_forward(model.netG, tensor_image)

            # 后处理
            np_image = util.tensor2img(output)
            np_image = cv2.cvtColor(np_image, cv2.COLOR_RGB2BGR)

            # 保存结果
            output_path = pathlib.Path(args.output_dir) / img_path.name
            cv2.imwrite(str(output_path), np_image)
            
            # 更新进度条
            progress_bar.update(1)
            
        except Exception as e:
            tqdm.write(f"Error processing {img_path.name}: {str(e)}")
            progress_bar.update(1)
            continue

    progress_bar.close()
    print("\nProcessing completed!")


if __name__ == "__main__":
    main()
