import pytesseract
from PIL import Image
from presidio_analyzer import AnalyzerEngine
from presidio_anonymizer import AnonymizerEngine

class PIIDetector:
    def __init__(self, tesseract_path=None, lang='eng', entities=None):
        """
        初始化PII检测器
        :param tesseract_path: Tesseract可执行文件路径（如果不在系统PATH中）
        :param lang: OCR语言，默认英语 ('eng')，中文使用 'chi_sim'
        :param entities: 要检测的PII实体类型列表
        """
        if tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            
        self.lang = lang
        self.entities = entities or [
            'PERSON', 'PHONE_NUMBER', 'EMAIL_ADDRESS',
            'CREDIT_CARD', 'LOCATION', 'DATE_TIME'
        ]
        
        # 初始化Presidio组件
        self.analyzer = AnalyzerEngine()
        self.anonymizer = AnonymizerEngine()
        
    def ocr_extract(self, image_path):
        """
        执行OCR文本提取
        :param image_path: 图片文件路径
        :return: 提取的文本（失败返回None）
        """
        try:
            with Image.open(image_path) as img:
                return pytesseract.image_to_string(img, lang=self.lang).strip()
        except Exception as e:
            print(f"OCR提取失败: {str(e)}")
            return None
    
    def analyze_pii(self, text):
        """
        分析文本中的PII信息
        :param text: 待分析文本
        :return: (检测结果列表, 匿名化文本)
        """
        results = self.analyzer.analyze(
            text=text,
            language='en',  # 分析语言独立于OCR语言
            entities=self.entities
        )
        anonymized = self.anonymizer.anonymize(text, results).text
        return results, anonymized
    
    def analyze_image(self, image_path):
        """
        完整处理流程
        :param image_path: 图片路径
        :return: 字典包含完整结果（包含错误信息）
        """
        result = {
            'success': False,
            'text': None,
            'pii': [],
            'anonymized': None,
            'error': None
        }
        
        text = self.ocr_extract(image_path)
        if not text:
            result['error'] = "OCR提取失败"
            return result
            
        try:
            pii_results, anonymized = self.analyze_pii(text)
            result.update({
                'success': True,
                'text': text,
                'pii': [self._format_result(r, text) for r in pii_results],
                'anonymized': anonymized
            })
        except Exception as e:
            result['error'] = f"PII分析失败: {str(e)}"
            
        return result
    
    def _format_result(self, result, full_text):
        """格式化单个PII检测结果"""
        return {
            'entity_type': result.entity_type,
            'confidence': round(result.score, 2),
            'text': full_text[result.start:result.end],
            'start': result.start,
            'end': result.end
        }

# 示例用法
if __name__ == "__main__":
    # 初始化检测器（参数根据需要配置）
    detector = PIIDetector(
        lang='eng',  # 使用中文识别时改为 'chi_sim'
        entities=['PHONE_NUMBER', 'EMAIL_ADDRESS', 'CREDIT_CARD']
    )
    
    # 分析图片
    analysis = detector.analyze_image("sample_document.png")
    
    if analysis['success']:
        print("提取文本：\n", analysis['text'])
        print("\n检测到PII信息：")
        for pii in analysis['pii']:
            print(f"- [{pii['entity_type']}] {pii['text']} (置信度: {pii['confidence']})")
        print("\n匿名化文本：\n", analysis['anonymized'])
    else:
        print("处理失败:", analysis['error'])
