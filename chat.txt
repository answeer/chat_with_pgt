from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
import bleach
import re
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class ExecutableScript(Scanner):

    def __init__(self, **kwargs):
        super().__init__("execuable_script", 0.8)
        self.scripts_pattern = {"embedded script":re.compile(r"<script.*?>.*?</script>"),
                           "iframe":re.compile(r"<iframe.*?>.*?</iframe>"),
                           "object":re.compile(r"<object.*?>.*?</object>"),
                           "embed":re.compile(r"<embed.*?>.*?</embed>"),
                           "applet":re.compile(r"<applet.*?>.*?</applet>"),
                           "link":re.compile(r"<link.*?>"),
                           "style":re.compile(r"<style.*?>.*?</style>"),
                           "JavaScript event handlers":re.compile(r"on\w+=\s*['\"].+?['\"]"),
                           "JavaScript":re.compile(r"<JavaScript\s*:"),
                           "data":re.compile(r"<JavaScript\s*:"),
                           "img tag with src":re.compile(r"<img.*?src\s*['\"].*?['\"].*?>"),
                           "a tag with href":re.compile(r"<a.*?href\s*['\"].*?['\"].*?>"),
                           "body":re.compile(r"<body.*?online=.*?>"),
                           "input":re.compile(r"<input.*?>"),
                           "form":re.compile(r"<form.*?>.*?</form>"),
                           "marquee":re.compile(r"<marquee.*?>.*?</marquee>"),
                           "base":re.compile(r"<base.*?>"),
                           }

    def predict(self,data):
        try:
            # check the HTML code block, if exist, match the script patterns.
            cleaned_data = bleach.clean(data, strip=True)
            if cleaned_data != data:
                languages = []
                for language, pattern in self.scripts_pattern.items():
                    if re.search(pattern,data):
                        languages.append(language)
                prediction = "Found executable scripts: {}.".format(', '.join(languages))
                score = 0
            else:
                prediction = "No executable scripts found."
                score = 1
        except Exception as e:
            prediction = "Error occured: {}".format(e)
            score = 0
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
            
        return prediction,score
 
    def format_response(self):
        self.response["prediction"]["executable_script"] = self.pred[0]
        self.response["score"] = self.pred[1]
