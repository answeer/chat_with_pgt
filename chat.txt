from llm_sanitation.scanners.scanner_base import Scanner
import re
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class RemoveWhitespaces(Scanner):
    """
    A Scanner class that removes unnecessary whitespaces from text data.

    This class trims and condenses multiple consecutive whitespace characters 
    (including tabs and newlines) into a single space. It extends the Scanner base class 
    and offers sanitization features for text data.

    Attributes:
        sanitize (bool): Flag to indicate whether to perform the sanitization.

    Methods:
        predict(data: str) -> tuple:
            Trims and removes excessive whitespace characters from the input text.
            Returns a tuple containing a score (1 for success, 0 for failure) and the sanitized text.
        
        format_response() -> None:
            Formats the response by assigning the score and sanitized text to the response dictionary.
    """

    def __init__(self, **kwargs):
        """
        Initializes the RemoveWhitespaces scanner.

        Args:
            sanitize (bool): Flag indicating whether the text should be sanitized.
        """
        sanitize = kwargs["sanitize"]
        super().__init__("remove_whitespaces", 0.5, sanitize=sanitize)

    def predict(self, data):
        """
        Removes unnecessary whitespaces from the provided text data.

        This method trims leading and trailing whitespace and condenses multiple 
        consecutive spaces into a single space.

        Args:
            data (str): The input text from which whitespace characters need to be removed.

        Returns:
            tuple: A tuple containing a score (1 for success, 0 for failure) and the sanitized text.
        """
        sanitized_data = data
        score = 0
        try:
            sanitized_data = ' '.join(data.strip().split())
            score = 1
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)

        return score, sanitized_data

    def format_response(self):
        """
        Formats the scanner's response.

        Assigns the score and sanitized text to the response dictionary, making them 
        available for further processing or output.
        """
        self.response["score"] = self.pred[0]
        self.response['sanitized_data'] = self.pred[1]
