from transformers import pipeline
from abc import ABC, abstractmethod
from dataclasses import dataclass
from llm_sanitation.utils.models import *
from time import time

def timer(func):
    def wrapper(*args, **kwargs):
        start_time = time()
        result = func(*args, **kwargs)
        end_time = time()
        print(f"Function {func.__name__} took: {end_time - start_time} seconds")
        return result
    return wrapper

@dataclass
class Scanner(ABC):
    score_thresh = 1
    scanner_nm = None
    coll_response = []

    def __init__(self, *args, **kwargs):
        self._kwargs = kwargs

        # Create response template
        self.response_template()

        scanner_nm, threshold = args
        self.scanner_nm = scanner_nm
        self.score_thresh = threshold
        self.response["scanner"] = self.scanner_nm

    def response_template(self):
        self.response = {
        "scanner" : None,
        "sanitized_text" : None,
        "prediction" : {},
        "score" : None,
        "kill" : None,
    }

    def collect_response(self):
        self.coll_response.append(self.response)

    def score(self):
        if self.response["score"] is not None and self.response["score"] < self.score_thresh:
            self.response["kill"] = True
        else:
            self.response["kill"] = False

    def format_response(self):
        raise NotImplementedError("Format Response Not implemented in the scanner")

    def get_args(self):
        return self._kwargs

    def predict(self, data):
        transformer_pipe = pipeline(models_path[self.scanner_nm][1], model=models_path[self.scanner_nm][0])
        pred = transformer_pipe(data, **self._kwargs)
        return pred
    
    @timer
    def validate(self, data):
        self.pred = self.predict(data)
        self.format_response()
        self.score()
        self.collect_response()
        return self.response
import time
import functools

def timing_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"Function '{func.__name__}' executed in {execution_time:.4f} seconds")
        return result
    return wrapper
