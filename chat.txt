import os
import traceback
import json
from llm_sanitation.utils.callback import Callback
from llm_sanitation.utils.checks import Checks
from llm_sanitation.utils.error_codes import ERROR_CODE_DICT
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class Action:
    def __init__(self, default_scanner_path, **kwargs,):
        LogUtil.log(LogType.TRANSACTION, LogLevel.INFO, "Running Initialized")
        self.response = Callback(**kwargs)
        self.check = Checks(self.response)
        self.kwargs = kwargs
        self.combined_result = []
        self.nstp_result = []
        self.default_scanners = self.load_default_scanners(default_scanner_path)  # Load JSON config

    @staticmethod
    def load_default_scanners(config_path):
        """Loads default scanner configurations from a JSON file."""
        try:
            with open(config_path, "r") as file:
                return json.load(file)
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, f"Error loading default scanners: {e}")
            return {}

    def determine_task_group(self,data):
        """Determines the task group based on the input data type."""
        return 'text_data_sanitation'

    def merge_execution_plan(self, task_group, execution_plan):
        """Merge default scanners with additional execution plan."""
        default_plan = self.default_scanners.get(task_group, {})
        return {**default_plan, **execution_plan}  # Default scanners take precedence

    def run_scanner(self, data, scanner_nm, param, **kwargs):
        """Dynamically imports and runs the specified scanner with provided parameters."""
        try:
            scanners = __import__("llm_sanitation.scanners", fromlist=[scanner_nm])
            scanner = getattr(scanners, scanner_nm)
            scanner_obj = scanner(**param)
            result = scanner_obj.validate(data, **self.kwargs)
            self.combined_result.append(result)
            self.nstp_result.append(result.get("NSTP"))
            return result
        except (ImportError, AttributeError) as e:
            error_code = "FRDIOS9000"
            error_message = ERROR_CODE_DICT[error_code].format(str(e))
            self.response.form_response(error_code, error_message)
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=self.kwargs['job_id'], error=error_message)
            return None

    def get_result(self):
        """Returns all combined results from the scanners."""
        return self.combined_result

    def get_nstp_result(self):
        """Returns NSTP results from each scanner."""
        return self.nstp_result

    def run_action(self, execution_plan, data, save_path):
        """Executes the scanning process based on the provided execution plan and scanner type."""
        try:
            error_code = ""
            error_message = ""
            job_id = self.kwargs['job_id']
            task_group = self.determine_task_group(data)
            self.kwargs['task_group'] = task_group
            execution_plan = self.merge_execution_plan(task_group, execution_plan)

            # Pre-validation checks based on scanner type
            if task_group == "text_data_sanitation":
                self.check.check_text(data)
            else:
                error_code = "FRDIOS0006"
                error_message = ERROR_CODE_DICT["FRDIOS0006"].format(str(task_group))
                LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=job_id, error=error_message)
                return None, error_code,error_message
            
            if self.response.status == "failed":
                error_code = self.response.error_code
                error_message = self.response.error_message
                LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=job_id, error=error_message)
                return None, error_code,error_message
            
            # Run each scanner in the execution plan
            for scanner_nm, param in execution_plan.items():
                result = self.run_scanner(data, scanner_nm, param, **kwargs)
                data = (
                    data if result["sanitized_data"] is None else result["sanitized_data"]
                )
                
                if self.response.status == "failed":
                    error_code = self.response.error_code
                    error_message = self.response.error_message
                    LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=job_id, error=error_message)
                    return None, error_code, error_message
                
            return self.combined_result,error_code,error_message

        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=job_id, error=str(e))
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, traceback.format_exc())
            error_code = "FRDIOS9000"
            error_message = ERROR_CODE_DICT[error_code].format(str(e))
            return None, error_code, error_message
        
        finally:
            if save_path:
                response_json_path = os.path.join(save_path, task_group+"_response.json")
                self.response.save_results(combined_result=self.combined_result)
                self.response.return_response(response_json_path, error_code, error_message)



if __name__ == "__main__":

    payload = {
    "job_params": {
        "jobid": "JID-54ca58ba-c495-11ed-b20c-0a586e830578",
        "task_id": "TID-54ca58ba-c495-11ed-b20c-0a586e830578",
        "app_name": "synthesizer",
        "use_case": "aadhar_redact",
        "save_path": r"C:\Users\1657820\Desktop\51433-swoosh-io-sanitation",
    },
    "service_params": {
        "callback_url": "http://service-swoosh-orchestrator.swoosh-dev.svc.cluster.local:8889/api/v1/callback",
        "job_object": {
            "io": "i",
            "policy_id": "policy_00001",
            "task_group":"text_data_sanitation",
            "execution_plan": {},
            "data": """
        My credit card number is 4095-2609-9393-4932 and my crypto wallet id is 16Yeky6GMjeNkAiNcBY7ZhrLoMSgg1BoyZ.
        On September 18 I visited microsoft.com and sent an email to test@presidio.site,  from the IP 192.168.0.1.
        hash = fb6af75df86d3171ea6c898d4e6601111fc1a31be1708faf2e13945178311c48"""
        }
    }
}
    kwargs = {
        "job_id": payload["job_params"].get("jobid", "NA"),
        "task_id": payload["job_params"].get("task_id", "NA"),
        "use_case": payload["job_params"].get("use_case", "NA"),
        "io": payload["service_params"]["job_object"].get("io", "NA"),
        "policy_id": payload["service_params"]["job_object"].get("policy_id", "NA"),
    }
    default_scanner_path = "llm_sanitation\configs\default_scanners.json"
    action_obj = Action(default_scanner_path, **kwargs)

    result, error_code, error_message = action_obj.run_action(
        payload["service_params"]["job_object"]["execution_plan"],
        payload["service_params"]["job_object"]["data"],
        payload["job_params"]["save_path"]
    )
    print("Action completed")
    print(result)
