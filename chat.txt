import pandas as pd
import random

class EvalDataset:
    def __init__(self, data_path='Consolidated.xlsx'):
        self.data_path = data_path

    def load_dataset(self, sheet_names):
        # 存放所有 sheet 的数据
        all_data = {}

        for sheet_name in sheet_names:
            # 读取每个 sheet 的数据
            df = pd.read_excel(self.data_path, sheet_name=sheet_name)

            # 检查并确保 'Context' 和 'answer' 列为字符串类型
            df['Context'] = df['Context'].apply(lambda x: str(x) if not isinstance(x, str) else x)
            df['answer'] = df['answer'].apply(lambda x: str(x) if not isinstance(x, str) else x)

            # 将每个 sheet 的数据存入字典
            all_data[sheet_name] = df[['Context', 'answer']]

        return all_data  # 返回包含每个 sheet 数据的字典

    def augment_dataset(self, sheet_names):
        all_data = self.load_dataset(sheet_names)

        # 正样本列表
        positive_samples = []
        for sheet_name, df in all_data.items():
            for _, row in df.iterrows():
                positive_samples.append({'Context': row['Context'], 'Answer': row['answer'], 'Label': 1})

        # 负样本列表
        negative_samples = []
        positive_sample_count = len(positive_samples)
        negative_sample_target = positive_sample_count // 2  # 负样本数量设为正样本的一半

        # 在不同的 sheet 间生成负样本
        sheet_combinations = [(sheet1, sheet2) for sheet1 in sheet_names for sheet2 in sheet_names if sheet1 != sheet2]

        while len(negative_samples) < negative_sample_target:
            # 随机选择两个不同的 sheet
            sheet1, sheet2 = random.choice(sheet_combinations)
            context = random.choice(all_data[sheet1]['Context'].tolist())
            answer = random.choice(all_data[sheet2]['answer'].tolist())

            # 检查生成的负样本是否已存在于负样本列表中
            if not any(sample['Context'] == context and sample['Answer'] == answer for sample in negative_samples):
                negative_samples.append({'Context': context, 'Answer': answer, 'Label': 0})

        # 将正样本和负样本合并
        augmented_data = positive_samples + negative_samples
        return pd.DataFrame(augmented_data)

    def save_augmented_dataset(self, augmented_df, file_name='augmented_dataset.xlsx'):
        augmented_df.to_excel(file_name, index=False)
        print(f"Augmented dataset saved to {file_name}")


if __name__ == "__main__":
    eval_dataset = EvalDataset()
    sheet_names = ['Sheet1', 'Sheet2', 'Sheet3']

    # 增广数据集
    augmented_df = eval_dataset.augment_dataset(sheet_names=sheet_names)

    # 保存增广后的数据集
    eval_dataset.save_augmented_dataset(augmented_df, file_name='augmented_dataset.xlsx')
