import os
from llm_sanitation.utils.common import read_config
from llm_sanitation.agent.utils.defaults import scanner_default
from llm_sanitation.agent.utils.connectors import get_agent_mfst, get_usecase_mfst

from llm_sanitation.agent.utils.common import (
    get_policy,
    get_usecase_data_policies,
)


class Profiler:
    def __init__(self):
        self.scanner_default = scanner_default

    def get_agent_bskills(agent_mfst):
        return agent_mfst["profile"]["buz_skills"]

    def get_usecase_policy_skills(self, usecase_mfst, agent_nm):
        policies = get_usecase_data_policies(usecase_mfst, agent_nm)
        actions = []
        ai_skills = []
        b_skills = []
        for policy in policies:
            policy_json = get_policy(policy)
            stmts = policy_json["Statement"]

            for stmt in stmts:
                actions.extend(stmt["Action"])

        for action in actions:
            b_skill, ai_skill = action.split(":")
            b_skills.append(b_skill)

            if ai_skill == "*":
                ai_skills.extend(self.scanner_default[b_skill])
            else:
                ai_skills.append(ai_skill)

        return b_skills, ai_skills

    def get_agent_skills(self, agent_mfst):
        b_skills = agent_mfst["profile"]["buz_skills"]
        ai_skills = agent_mfst["profile"]["ai_skills"]

        return b_skills, ai_skills

    def validate_skill(self, agent_mfst_nm, usecase_mfst_nm, agent_nm="*"):

        agent_mfst = get_agent_mfst(agent_mfst_nm)
        usecase_mfst = get_usecase_mfst(usecase_mfst_nm)

        agent_b_skills, agent_ai_skills = self.get_agent_skills(agent_mfst)
        usecase_b_skills, usecase_ai_skills = self.get_usecase_policy_skills(
            usecase_mfst, agent_nm
        )

        # validate_bskill
        vald_bskill = set(usecase_b_skills).issubset(agent_b_skills)
        if not vald_bskill:
            print("the bskills in usecase manifest is not an agent skill")

        # validate ai_skill
        vald_aiskill = set(usecase_ai_skills).issubset(agent_ai_skills)
        if not vald_aiskill:
            print("the ai skills in usecase manifest is not an agent skill")

        return all([vald_bskill, vald_aiskill])


if __name__ == "__main__":
    agent = "agent1"
    profiler_obj = Profiler()
    profiler_result = profiler_obj.validate_skill(
        "agent_manifest", "usecase_manifest", agent
    )

    print("Profiler result : ", profiler_result)
