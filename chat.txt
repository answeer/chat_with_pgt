from sklearn.metrics import accuracy_score, f1_score, recall_score
import matplotlib.pyplot as plt
import numpy as np

class EvalDataset:
    # 省略其他方法

    def plot_metrics_bar(self, results, save_path='model_metrics_comparison.png'):
        metrics = ['Accuracy', 'F1-Score', 'Recall']
        model_metrics = {metric: [] for metric in metrics}
        model_names = []

        for model_nm, (true_labels, predictions) in results.items():
            # 计算每个模型的 metrics
            accuracy = accuracy_score(true_labels, predictions)
            f1 = f1_score(true_labels, predictions, zero_division=0)
            recall = recall_score(true_labels, predictions, zero_division=0)
            
            # 存储到对应列表中
            model_names.append(model_nm)
            model_metrics['Accuracy'].append(accuracy)
            model_metrics['F1-Score'].append(f1)
            model_metrics['Recall'].append(recall)

        # 绘制柱状图
        x = np.arange(len(model_names))  # x 轴的位置
        bar_width = 0.2  # 每个柱的宽度

        plt.figure(figsize=(10, 6))

        # 画每个 metric 的柱状图，依次偏移位置
        for i, metric in enumerate(metrics):
            plt.bar(x + i * bar_width, model_metrics[metric], width=bar_width, label=metric)

        # 设置 x 轴和图例
        plt.xlabel('Models')
        plt.ylabel('Score')
        plt.title('Comparison of Accuracy, F1-Score, and Recall for Each Model')
        plt.xticks(x + bar_width, model_names)
        plt.legend(title='Metrics')
        
        # 保存并显示图表
        plt.tight_layout()
        plt.savefig(save_path)
        plt.show()
        print(f"Model metrics comparison plot saved to {save_path}")


if __name__ == "__main__":
    model_list = ['minicheck', 'hhem', 'factual_consistency']
    eval_dataset = EvalDataset()
    sample_ratio = 0.1

    results = {}
    for model_nm in model_list:
        print(f"Running evaluation for {model_nm}...")
        _, true_labels, predictions, _ = eval_dataset.run(model_nm, sample_ratio=sample_ratio)
        results[model_nm] = (true_labels, predictions)

    # 绘制指标柱状图
    eval_dataset.plot_metrics_bar(results)
