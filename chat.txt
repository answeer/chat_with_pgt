from llm_sanitation.scanners.scanner_base import Scanner
from llm_sanitation.utils.models import *
from pypdf import PdfReader
from PIL import Image
from PIL.ExifTags import TAGS
from datetime import datetime
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel


class EditDate(Scanner):

    def __init__(self, **kwargs):
        self.date_interval = kwargs["date_interval"]
        super().__init__("edit_date", 0.5, date_interval=self.date_interval)
        self.response
        
    def modification_date_checker(self, created_date, modified_date):
        """
        Validates the creation and modification dates in the image/ doc metadata to see if there have been any edits since creation
        """
        if created_date == None and modified_date == None:
            tampered = (
                "Date details are not available both create date and modified date."
            )
            score = 0
        elif created_date == None and modified_date is not None:
            tampered = "Date details are not available for create date."
            score = 0
        elif created_date is not None and modified_date == None:
            tampered = "Date details are not available for modified date."
            score = 1
        elif (
            created_date is not None
            and modified_date is not None
            and abs((modified_date - created_date)).days > self.date_interval
        ):
            tampered = f"Potentially tampered since {abs((modified_date - created_date)).days} days have passed since the modification date compared to the creation date, exceeding the maximum limit of {self.date_interval} days."
            score = 0
        else:
            tampered = "Potentially not tampered."
            score = 1
        return tampered, score

    def predict(self, file_path):
        software_tampering = None
        score = 0
        file_type = file_path.split(".")[-1].lower()
        # if file_type not in ['pdf','jpg','png','jpeg']:
        #     self.response['error_code'].append("ERR002")
        try:
            if file_type == "pdf":
                self.reader = PdfReader(file_path)
                create_date = self.reader.metadata.creation_date
                modification_date = self.reader.metadata.modification_date
            else:
                image = Image.open(file_path)
                exif_data = image.getexif()
                if exif_data is not None:
                    exif = {TAGS.get(tag, tag): value for tag, value in exif_data.items()}
                    create_date = exif.get("DateTimeOriginal", None)
                    modification_date = exif.get("DateTime", None)
                if create_date is not None:
                    create_date = datetime.strptime(create_date, "%Y:%m:%d %H:%M:%S")
                if modification_date is not None:
                    modification_date = datetime.strptime(
                        modification_date, "%Y:%m:%d %H:%M:%S"
                    )
            software_tampering, score = self.modification_date_checker(
                create_date, modification_date
            )
        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, e)
        return software_tampering, score

    def format_response(self):
        self.response["prediction"]["edit_date"] = self.pred[0]
        self.response["score"] = self.pred[1]
