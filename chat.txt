import os
import traceback
from llm_sanitation.utils.callback import Callback
from llm_sanitation.utils.checks import Checks
from llm_sanitation.utils.error_codes import ERROR_CODE_DICT
from llm_sanitation.logging.logging_setup import LogUtil, LogType, LogLevel

class Action:
    DEFAULT_SCANNERS = {
        "file": ["FileFormatCheck"],
        "image": ["ImageBlurrinessCheck", "ImageDimensionCheck"],
        "text": ["HarmfulString", "ProfanityCheck", "PiiDetector", "RemoveUnicode", "SecretDetector"],
        "structured": ["JsonValidator"]
    }

    def __init__(self, **kwargs):
        LogUtil.log(LogType.TRANSACTION, LogLevel.INFO, "Running Initialized")
        self.response = Callback(**kwargs)
        self.check = Checks(self.response)
        self.kwargs = kwargs
        self.combined_result = []
        self.nstp_result = []

    def detect_file_type(self, data):
        """Detects the data type based on input data or metadata."""
        if isinstance(data, str) and data.strip().startswith("{"):  # simple check for JSON
            return "structured"
        elif isinstance(data, str):
            return "text"
        elif hasattr(data, "format"):  # Check if the data has a format (e.g., image)
            return "image"
        return "file"

    def run_scanner(self, data, scanner_nm, param, **kwargs):
        """Dynamically imports and runs the specified scanner with provided parameters."""
        try:
            scanners = __import__("llm_sanitation.scanners", fromlist=[scanner_nm])
            scanner = getattr(scanners, scanner_nm)
        except (ImportError, AttributeError) as e:
            error_code = "FRDIOS9000"
            error_message = ERROR_CODE_DICT[error_code].format(str(e))
            self.response.form_response(error_code, error_message)
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=self.kwargs['job_id'], error=error_message)
            return None
        
        scanner_obj = scanner(**param)
        result = scanner_obj.validate(data, **kwargs)

        self.combined_result.append(result)
        self.nstp_result.append(result.get("NSTP"))

        return result

    def get_default_execution_plan(self, file_type):
        """Generates an execution plan for default scanners based on file type."""
        return {scanner: {"sanitize": True} for scanner in self.DEFAULT_SCANNERS.get(file_type, [])}

    def merge_execution_plans(self, default_plan, additional_scanners):
        """Combines the default execution plan with any additional scanners."""
        combined_plan = default_plan.copy()
        for scanner, param in additional_scanners.items():
            combined_plan[scanner] = param  # Overwrites if duplicate, otherwise adds new
        return combined_plan

    def run_action(self, data, save_path, additional_scanners=None, default_only=False):
        """
        Executes the scanning process with the option to include additional non-default scanners.
        
        Parameters:
            data: The data to scan.
            save_path: Path to save results.
            additional_scanners: Optional dict of additional scanners to include.
            default_only: If True, runs only the default scanners.
        """
        try:
            job_id = self.kwargs['job_id']
            task_group = self.kwargs['task_group']

            file_type = self.detect_file_type(data)
            default_plan = self.get_default_execution_plan(file_type)
            execution_plan = (
                default_plan if default_only else self.merge_execution_plans(default_plan, additional_scanners or {})
            )

            for scanner_nm, param in execution_plan.items():
                result = self.run_scanner(data, scanner_nm, param, **self.kwargs)
                data = data if result["sanitized_data"] is None else result["sanitized_data"]
                
                if self.response.status == "failed":
                    error_code = self.response.error_code
                    error_message = self.response.error_message
                    LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=job_id, error=error_message)
                    return None, error_code, error_message
                
            return self.combined_result, "", ""

        except Exception as e:
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, "Running ended with error", jid=job_id, error=str(e))
            LogUtil.log(LogType.ERROR, LogLevel.ERROR, traceback.format_exc())
            error_code = "FRDIOS9000"
            error_message = ERROR_CODE_DICT[error_code].format(str(e))
        
        finally:
            if save_path:
                response_json_path = os.path.join(save_path, task_group + "_response.json")
                self.response.save_results(combined_result=self.combined_result)
                self.response.return_response(response_json_path, error_code, error_message)


if __name__ == "__main__":
    payload = {
        "job_params": {
            "jobid": "JID-54ca58ba-c495-11ed-b20c-0a586e830578",
            "task_id": "TID-54ca58ba-c495-11ed-b20c-0a586e830578",
            "app_name": "synthesizer",
            "use_case": "aadhar_redact",
            "save_path": r"C:\Users\1657820\Desktop\51433-swoosh-io-sanitation",
        },
        "service_params": {
            "job_object": {
                "task_group": "text_data_sanitation",
                "data": """
                    My credit card number is 4095-2609-9393-4932 and my crypto wallet id is 16Yeky6GMjeNkAiNcBY7ZhrLoMSgg1BoyZ.
                    On September 18 I visited microsoft.com and sent an email to test@presidio.site,  from the IP 192.168.0.1.
                    hash = fb6af75df86d3171ea6c898d4e6601111fc1a31be1708faf2e13945178311c48"""
            }
        }
    }
    kwargs = {
        "job_id": payload["job_params"].get("jobid", "NA"),
        "task_group": payload["service_params"].get("job_object", {}).get("task_group", "NA"),
    }

    data = payload["service_params"].get("job_object", {}).get("data", "")
    save_path = payload["job_params"].get("save_path", "NA")

    additional_scanners = {
        "AdditionalScanner1": {"sanitize": True},
        "AdditionalScanner2": {"sanitize": False}
    }

    action_obj = Action(**kwargs)
    result, error_code, error_message = action_obj.run_action(data, save_path, additional_scanners=additional_scanners)
    print("Action completed")
    print(result)
